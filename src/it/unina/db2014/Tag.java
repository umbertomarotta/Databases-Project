/*
 * DBFrame.java
 *
 * Modified on 2013-06-03
 */
package it.unina.db2014;

import java.sql.*;
import javax.swing.*;
import java.util.*;
import java.util.regex.*;
import java.awt.event.KeyEvent;
import java.time.*;


/**
 *
 * @author Massimo
 * @author ADeLuca
 */
public class Tag extends DBFrame1 {

   /**
    * Creates new form DBFrame
    */
   public Tag() {
      super();
      initComponents();
      tFotoModel = new DefaultListModel();
      tVideoModel = new DefaultListModel();
      tFoto.setModel(tFotoModel);
      tVideo.setModel(tVideoModel);
      setModalita(APPEND_QUERY);
      setFrameTable(tabCaratteristica);
      setNomeTabella("tag");
   }
   
   public Tag(int usr) {
      this();
      this.impostaCodice(Integer.toString(usr));
   }

   public final void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
         case APPEND_QUERY:
            tTesto.setEnabled(true);
            tFoto.setEnabled(true);
            tVideo.setEnabled(true);
            break;
         case BROWSE:
            tTesto.setEnabled(false);
            tFoto.setEnabled(false);
            tVideo.setEnabled(false);
            break;
         case UPDATE:
            tTesto.setEnabled(true);
            tFoto.setEnabled(true);
            tVideo.setEnabled(true);
            break;
      }
   }

   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste gi? un'altro Tag con lo stesso codice";
         JOptionPane.showMessageDialog(this, msg, "Errore", 
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }

   protected void premutoOK() {
      if (getPadre() != null) {
         getPadre().setProprietaPadre("Tag", getTCodice().getText());
         dispose();
      }
   }
   
   public void setProprietaPadre(String proprieta, String valore) {
        if (proprieta.equals("Video")) {
            if (!tVideoModel.contains(valore)){
                tVideoModel.addElement(valore);
            }
            tTesto.requestFocusInWindow();
        }
        if (proprieta.equals("Foto")) {
            if (!tFotoModel.contains(valore)){
                tFotoModel.addElement(valore);
            }
            tTesto.requestFocusInWindow();
        }
    }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        tTesto = new javax.swing.JTextField();
        spCaratteristica = new javax.swing.JScrollPane();
        tabCaratteristica = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tFoto = new javax.swing.JList();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tVideo = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tag");

        jLabel2.setText("Testo");

        tabCaratteristica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabCaratteristica.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        spCaratteristica.setViewportView(tabCaratteristica);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/unina/logo.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        tFoto.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "azz", "dzx", "ftjh" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        tFoto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tFotoKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tFoto);

        jLabel17.setText(" (F2 cerca)");

        jLabel18.setText("(F3 Elimina)");

        jLabel3.setText("Foto");

        tVideo.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "azz", "dzx", "ftjh" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        tVideo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tVideoKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tVideo);

        jLabel6.setText("Video");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(spCaratteristica)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(23, 23, 23)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel17)
                                    .add(jLabel18))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(jScrollPane1)
                                        .add(18, 18, 18))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(125, 125, 125)))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(jLabel2)
                                .add(18, 18, 18)
                                .add(tTesto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 258, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(156, 156, 156))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(125, 125, 125)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel1)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tTesto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(jLabel6))
                        .add(5, 5, 5)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel17)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel18))
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(12, 12, 12)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(spCaratteristica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tFotoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFotoKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            Foto m;
            if (tFoto.isSelectionEmpty()) m = new Foto();
            else  m = new Foto(Integer.decode(tFotoModel.elementAt(tFoto.getSelectedIndex()).toString()));
            m.setPadre(this);
            m.setVisible(true);
            m.Cerca();
        }
        else if (evt.getKeyCode() == KeyEvent.VK_F3 && !tFoto.isSelectionEmpty()) {
            tFotoModel.removeElementAt(tFoto.getSelectedIndex());
        }
    }//GEN-LAST:event_tFotoKeyPressed

    private void tVideoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tVideoKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            Video m;
            if (tVideo.isSelectionEmpty()) m = new Video();
            else  m = new Video(Integer.decode(tVideoModel.elementAt(tVideo.getSelectedIndex()).toString()));
            m.setPadre(this);
            m.setVisible(true);
            m.Cerca();
        }
        else if (evt.getKeyCode() == KeyEvent.VK_F3 && !tVideo.isSelectionEmpty()) {
            tVideoModel.removeElementAt(tVideo.getSelectedIndex());
        }
    }//GEN-LAST:event_tVideoKeyPressed

   protected void mostraDati() {
      try {
         tTesto.setText(rs.getString("TESTO"));
         
         tFotoModel.clear();
         ArrayList<String> arr = Database.leggiValori("SELECT T.FILEID FROM TAGSFILE T INNER JOIN FOTO F ON F.FILEID = T.FILEID WHERE T.TAGID = " + getTCodice().getText());
         for(String item : arr) tFotoModel.addElement(item);
         
         tVideoModel.clear();
         arr = Database.leggiValori("SELECT T.FILEID FROM TAGSFILE T INNER JOIN VIDEO F ON F.FILEID = T.FILEID WHERE T.TAGID = " + getTCodice().getText());
         for(String item : arr) tVideoModel.addElement(item);

         super.mostraDati();
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   protected void pulisci() {
        super.pulisci();
        tTesto.setText("");
        tFotoModel.clear();
        tVideoModel.clear();
   }

   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st = null;
      String ID = getTCodice().getText(),
        TESTO = tTesto.getText();
      Pattern pat;
      Matcher matc;
      int k = 1;
      super.creaSelectStatement();
      query += " where 1=1 ";
      if (ID.length() > 0) {
         query += "and ID= ? ";
      }
      if (TESTO.length() > 0) {
         if (TESTO.indexOf("%") >= 0) {
            query += "and TESTO like ? ";
         } else {
            query += "and TESTO = ? ";
         }
      }

      if(!tFotoModel.isEmpty()){
          //query += "and ( ";
          query += "and " + tFotoModel.getSize() + "  = ( SELECT COUNT(*) FROM " + Database.schema + ".tagsfile WHERE ID = TAGID and ( ";
          for(Object item : tFotoModel.toArray()) query += "FILEID= " + item + " OR ";
          //query += "1=2 )";
          query += "1=2 ) )";
      }
      if(!tVideoModel.isEmpty()){
          //query += "and ( ";
          query += "and " + tVideoModel.getSize() + "  = ( SELECT COUNT(*) FROM " + Database.schema + ".tagsfile WHERE ID = TAGID and ( ";
          for(Object item : tVideoModel.toArray()) query += "FILEID= " + item + " OR ";
          //query += "1=2 )";
          query += "1=2 ) )";
      }
      
      pat = Pattern.compile("where$|and$");
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, 
                 ResultSet.CONCUR_READ_ONLY);

         if (ID.length() > 0) {
            st.setInt(k++, Integer.decode(ID));
         }
         if (TESTO.length() > 0) {
            st.setString(k++, TESTO);
         }
      } catch (SQLException e) {
      }
      return st;
   }
   
   protected PreparedStatement getComandoInserimento(Connection c)
           throws SQLException {
      String queryIns;
      PreparedStatement st;
      int codice = Integer.decode(getTCodice().getText());
      queryIns = "insert all into " + Database.schema + ".tag (ID,"
              + "TESTO) values(?,?) ";
      for(Object o : tFotoModel.toArray()){
          queryIns += "into " + Database.schema + ".tagsfile (TAGID,FILEID)"
                  + " values(" + codice + "," + o.toString() + ") ";
      }
      for(Object o : tVideoModel.toArray()){
          queryIns += "into " + Database.schema + ".tagsfile (TAGID,FILEID)"
                  + " values(" + codice + "," + o.toString() + ") ";
      }
      queryIns += " SELECT * FROM dual";
      st = c.prepareStatement(queryIns);
      st.setInt(1, codice);
      st.setString(2, tTesto.getText());
      return st;
   }

   protected PreparedStatement getComandoAggiornamento(Connection c)
           throws SQLException {
      int codice = Integer.decode(getTCodice().getText());
      String queryUp;
      PreparedStatement st;
      queryUp = "update " + Database.schema + ".tag set TESTO=? where ID=?";
      st = c.prepareStatement(queryUp);
      st.setInt(2, codice);
      st.setString(1, tTesto.getText());
      
      ArrayList<String> old = Database.leggiValori("SELECT FILEID FROM " + Database.schema + ".TAGSFILE WHERE TAGID = " + codice);
      for(String item : old){
          if(!tFotoModel.contains(item) && !tVideoModel.contains(item)) eseguiComando("delete from " + Database.schema + ".TAGSFILE where FILEID = " + item + " and TAGID = "+ codice);
      }
      for(Object item : tFotoModel.toArray()){
          if(!old.contains(item)) eseguiComando("insert into " + Database.schema + ".TAGSFILE (TAGID,FILEID) values(" + codice + "," + item + ")");
      }
      for(Object item : tVideoModel.toArray()){
          if(!old.contains(item)) eseguiComando("insert into " + Database.schema + ".TAGSFILE (TAGID,FILEID) values(" + codice + "," + item + ")");
      }
      
      return st;
   }
 
   /**
    * @param args the command line arguments
    */
   public static void main1(String args[]) {
      java.awt.EventQueue.invokeLater(new Runnable() {

         public void run() {
            new Tag().setVisible(true);
         }
      });
   }
   
    private DefaultListModel tVideoModel;
    private DefaultListModel tFotoModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane spCaratteristica;
    private javax.swing.JList tFoto;
    private javax.swing.JTextField tTesto;
    private javax.swing.JList tVideo;
    private javax.swing.JTable tabCaratteristica;
    // End of variables declaration//GEN-END:variables
}
