/*
 * DBFrame.java
 *
 * Modified on 2013-06-03
 */
package it.unina.db2014;

import java.sql.*;
import javax.swing.*;
import java.util.regex.*;
import java.awt.event.KeyEvent;

/**
 * Frame di gestione degli allestimenti dei veicoli. <br> Consente di inserire,
 * visualizzare e cancellare anche le caratteristiche.
 *
 * @author Massimo
 * @author ADeLuca
 */
public class Allestimento extends DBFrame {

   /**
    * Creates new form DBFrame
    */
   public Allestimento() {
      super();
      initComponents();
      setModalita(APPEND_QUERY);
      setFrameTable(tabAllestimento);
      setNomeTabella("vallestimento");
      tMarcaDescrizione.setEnabled(false);
      tModelloDescrizione.setEnabled(false);
   }

   public final void setModalita(int modo) {
      super.setModalita(modo);
      tabCaratteristiche.setModalita(CaratteristicheTable.BROWSE);
      switch (modo) {
         case APPEND_QUERY:
            tMarcaCodice.setEnabled(true);
            tModelloCodice.setEnabled(true);
            tDescrizione.setEnabled(true);
            tDaPeriodo.setEnabled(true);
            tAPeriodo.setEnabled(true);
            break;
         case BROWSE:
            tMarcaCodice.setEnabled(false);
            tModelloCodice.setEnabled(false);
            tDescrizione.setEnabled(false);
            tDaPeriodo.setEnabled(false);
            tAPeriodo.setEnabled(false);
            break;
         case UPDATE:
            tMarcaCodice.setEnabled(true);
            tModelloCodice.setEnabled(true);
            tDescrizione.setEnabled(true);
            tDaPeriodo.setEnabled(true);
            tAPeriodo.setEnabled(true);
            tabCaratteristiche.setModalita(CaratteristicheTable.UPDATE);
            break;
      }
   }

   public void setProprietaPadre(String proprieta, String valore) {
      if (proprieta.equals("Marca")) {
         tMarcaCodice.setText(valore);
         tModelloCodice.requestFocusInWindow();
      } else if (proprieta.equals("Modello")) {
         tModelloCodice.setText(valore);
         tDescrizione.requestFocusInWindow();
      }
   }

   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste gi? un altro allestimento con lo stesso codice";
         JOptionPane.showMessageDialog(this, msg, "Errore",
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        tDescrizione = new javax.swing.JTextField();
        spAllestimento = new javax.swing.JScrollPane();
        tabAllestimento = new javax.swing.JTable();
        tDaPeriodo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tAPeriodo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tMarcaCodice = new javax.swing.JTextField();
        tMarcaDescrizione = new javax.swing.JTextField();
        tModelloDescrizione = new javax.swing.JTextField();
        tModelloCodice = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        spCaratteristiche = new javax.swing.JScrollPane();
        tabCaratteristiche = new it.unina.db2014.CaratteristicheTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Allestimento");

        jLabel2.setText("Descrizione        ");

        tabAllestimento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spAllestimento.setViewportView(tabAllestimento);

        jLabel3.setText("Da periodo            ");

        jLabel4.setText("A periodo");

        jLabel5.setText("Marca (F2 cerca)");

        tMarcaCodice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tMarcaCodiceFocusLost(evt);
            }
        });
        tMarcaCodice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tMarcaCodiceKeyPressed(evt);
            }
        });

        tMarcaDescrizione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tMarcaDescrizioneActionPerformed(evt);
            }
        });

        tModelloCodice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tModelloCodiceFocusLost(evt);
            }
        });
        tModelloCodice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tModelloCodiceKeyPressed(evt);
            }
        });

        jLabel6.setText("Modello  (F2 cerca)");

        spCaratteristiche.setViewportView(tabCaratteristiche);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(spAllestimento, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 892, Short.MAX_VALUE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(27, 27, 27)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5)
                            .add(jLabel6)
                            .add(jLabel2)
                            .add(jLabel3))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(tDaPeriodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(tModelloCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(tMarcaCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(37, 37, 37)
                                        .add(jLabel4)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(tAPeriodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(28, 28, 28)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(tMarcaDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 454, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(tModelloDescrizione, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)))))
                            .add(tDescrizione, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, spCaratteristiche, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE))
                .add(150, 150, 150))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(134, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(tMarcaCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(tMarcaDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(tModelloCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(tModelloDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(tDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(tDaPeriodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4)
                    .add(tAPeriodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(spCaratteristiche, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 203, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(spAllestimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tModelloCodiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tModelloCodiceKeyPressed
       System.out.println("pressed");
       if (evt.getKeyCode() == evt.VK_F2) {
          Modello m;
          m = new Modello();
          m.setPadre(this);
          m.setVisible(true);
       }
    }//GEN-LAST:event_tModelloCodiceKeyPressed

    private void tModelloCodiceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tModelloCodiceFocusLost
       Object o;
       try {
          if (Integer.decode(tModelloCodice.getText()) > 0) {
             o = Database.leggiValore("select descrizione from modello where "
                     + "codice=?", Integer.decode(tModelloCodice.getText()));
             if (o != null) {
                tModelloDescrizione.setText(o.toString());
             }
             o = Database.leggiValore("select marcacodice from modello where "
                     + "codice=?", Integer.decode(tModelloCodice.getText()));
             if (o != null) {
                tMarcaCodice.setText(o.toString());
                o = Database.leggiValore("select descrizione from marca "
                        + "where codice=?", Integer.decode(o.toString()));
                if (o != null) {
                   tMarcaDescrizione.setText(o.toString());
                }
             }
          }
       } catch (NumberFormatException e) {
          //non me ne importa dell'errore
       }
    }//GEN-LAST:event_tModelloCodiceFocusLost

    private void tMarcaCodiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tMarcaCodiceKeyPressed
       System.out.println("pressed");
       if (evt.getKeyCode() == KeyEvent.VK_F2) {
          Marca m;
          m = new Marca();
          m.setPadre(this);
          m.setVisible(true);
       }
    }//GEN-LAST:event_tMarcaCodiceKeyPressed

    private void tMarcaCodiceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tMarcaCodiceFocusLost
       Object o;
       try {
          if (Integer.decode(tMarcaCodice.getText()) > 0) {
             o = Database.leggiValore("select descrizione from marca where "
                     + "codice=?", Integer.decode(tMarcaCodice.getText()));
             if (o != null) {
                tMarcaDescrizione.setText(o.toString());
             }

          }
       } catch (NumberFormatException e) {
          //mostraErrori(e,TMARCACODICEFOCUSLOST); 
          //tMarcaCodice.grabFocus();
       }
       tModelloCodice.setText("");
       tModelloDescrizione.setText("");
    }//GEN-LAST:event_tMarcaCodiceFocusLost

private void tMarcaDescrizioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tMarcaDescrizioneActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_tMarcaDescrizioneActionPerformed

   protected void mostraDati() {
      try {
         tMarcaCodice.setText(rs.getString("MarcaCodice"));
         tMarcaDescrizione.setText(rs.getString("Marca"));
         tModelloCodice.setText(rs.getString("ModelloCodice"));
         tModelloDescrizione.setText(rs.getString("Modello"));
         tDescrizione.setText(rs.getString("Descrizione"));
         tDaPeriodo.setText(rs.getString("DaPeriodo"));
         tAPeriodo.setText(rs.getString("APeriodo"));
         tabCaratteristiche.setCodice(rs.getInt("Codice"));
         super.mostraDati();
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   protected void pulisci() {
      super.pulisci();
      tDescrizione.setText("");
      tMarcaCodice.setText("");
      tMarcaDescrizione.setText("");
      tModelloCodice.setText("");
      tModelloDescrizione.setText("");
      tDaPeriodo.setText("");
      tAPeriodo.setText("");
      tabCaratteristiche.pulisci();
   }

   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st = null;
      Pattern pat;
      Matcher matc;
      String codice, marcacodice, modellocodice, descr, da, a;
      int k = 1;
      super.creaSelectStatement();
      codice = getTCodice().getText();
      marcacodice = tMarcaCodice.getText();
      modellocodice = tModelloCodice.getText();
      descr = tDescrizione.getText();
      da = tDaPeriodo.getText();
      a = tAPeriodo.getText();
      /*
       * if (codice.length()>0 || descr.length()>0 || sede.length()>0)
        {
       */
      query += " where";
      //}
      if (codice.length() > 0) {
         query += " codice= ? and";
      }
      if (marcacodice.length() > 0) {
         if (marcacodice.indexOf("%") >= 0) {
            query += " marcacodice like ? and";
         } else {
            query += " marcacodice = ? and";
         }
      }
      if (modellocodice.length() > 0) {
         if (modellocodice.indexOf("%") >= 0) {
            query += " modellocodice like ? and";
         } else {
            query += " modellocodice = ? and";
         }
      }
      if (descr.length() > 0) {
         if (descr.indexOf("%") >= 0) {
            query += " descrizione like ? and";
         } else {
            query += " descrizione = ? and";
         }
      }
      if (da.length() > 0) {
         if (da.indexOf("%") >= 0) {
            query += " daperiodo like ? and";
         } else {
            query += " daperiodo = ? and";
         }
      }
      if (a.length() > 0) {
         if (a.indexOf("%") >= 0) {
            query += " aperiodo like ?";
         } else {
            query += " aperiodo = ?";
         }
      }
      pat = Pattern.compile("where$|and$");
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      System.out.println(query);
      //query+=" order by codice";
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                 ResultSet.CONCUR_READ_ONLY);

         if (codice.length() > 0) {
            st.setInt(k++, Integer.decode(codice));
         }
         if (marcacodice.length() > 0) {
            st.setString(k++, marcacodice);
         }
         if (modellocodice.length() > 0) {
            st.setString(k++, marcacodice);
         }
         if (descr.length() > 0) {
            st.setString(k++, descr);
         }
         if (da.length() > 0) {
            st.setString(k++, da);
         }
         if (da.length() > 0) {
            st.setString(k++, da);
         }
      } catch (SQLException e) {
      }
      return st;
   }

   protected boolean eseguiSalva(Connection con) {
      CaratteristicaTableModel m;
      m = (CaratteristicaTableModel) tabCaratteristiche.getModel();
      return m.salva(con);
   }

   protected PreparedStatement getComandoInserimento(Connection c)
           throws SQLException {
      String queryIns;
      PreparedStatement st;
      queryIns = "insert into " + Database.schema + ".allestimento (codice,"
              + "modellocodice,Descrizione,daperiodo,aperiodo) "
              + "values(?,?,?,?,?)";
      st = c.prepareStatement(queryIns);
      st.setInt(1, Integer.decode(getTCodice().getText()));
      st.setInt(2, Integer.decode(tModelloCodice.getText()));
      st.setString(3, tDescrizione.getText());
      st.setString(4, tDaPeriodo.getText());
      st.setString(5, tAPeriodo.getText());
      return st;
   }

   protected PreparedStatement getComandoAggiornamento(Connection c)
           throws SQLException {
      String queryUp;
      PreparedStatement st;
      queryUp = "update " + Database.schema + ".allestimento "
              + "set descrizione=?,Modellocodice=?,daPeriodo=?,aPeriodo=? "
              + "where codice=?";
      st = c.prepareStatement(queryUp);
      st.setInt(5, Integer.decode(getTCodice().getText()));
      st.setInt(2, Integer.decode(tModelloCodice.getText()));
      st.setString(1, tDescrizione.getText());
      st.setString(3, tDaPeriodo.getText());
      st.setString(4, tAPeriodo.getText());
      return st;
   }

   /**
    * @param args the command line arguments
    */
   public static void main1(String args[]) {
      java.awt.EventQueue.invokeLater(new Runnable() {

         public void run() {
            new Modello().setVisible(true);
         }
      });
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane spAllestimento;
    private javax.swing.JScrollPane spCaratteristiche;
    private javax.swing.JTextField tAPeriodo;
    private javax.swing.JTextField tDaPeriodo;
    private javax.swing.JTextField tDescrizione;
    private javax.swing.JTextField tMarcaCodice;
    private javax.swing.JTextField tMarcaDescrizione;
    private javax.swing.JTextField tModelloCodice;
    private javax.swing.JTextField tModelloDescrizione;
    private javax.swing.JTable tabAllestimento;
    private it.unina.db2014.CaratteristicheTable tabCaratteristiche;
    // End of variables declaration//GEN-END:variables
}
