/*
 * DBFrame.java
 *
 * Modified on 2013-06-03
 */
package it.unina.db2014;

import java.sql.*;
import javax.swing.*;
import java.util.*;
import java.util.regex.*;
import java.awt.event.KeyEvent;
import java.time.*;


/**
 *
 * @author Massimo
 * @author ADeLuca
 */
public class Raccolta extends DBFrame1 {

   /**
    * Creates new form DBFrame
    */
   public Raccolta() {
      super();
      initComponents();
      tListaModel = new DefaultListModel();
      tLista.setModel(tListaModel);
      setModalita(APPEND_QUERY);
      setFrameTable(tabCaratteristica);
      setNomeTabella("raccolta");
   }
   
   public Raccolta(int usr) {
      this();
      tUtenteCodice.setText(Integer.toString(usr));
   }

   public final void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
         case APPEND_QUERY:
            tUtenteCodice.setEnabled(true);
            tFotoCodice.setEnabled(true);
            tNome.setEnabled(true);
            tDescrizione.setEnabled(true);
            tCreazione.setEnabled(true);
            tLista.setEnabled(true);
            break;
         case BROWSE:
            tUtenteCodice.setEnabled(false);
            tFotoCodice.setEnabled(false);
            tNome.setEnabled(false);
            tDescrizione.setEnabled(false);
            tCreazione.setEnabled(false);
            tLista.setEnabled(false);
            break;
         case UPDATE:
            tUtenteCodice.setEnabled(true);
            tFotoCodice.setEnabled(true);
            tNome.setEnabled(true);
            tDescrizione.setEnabled(true);
            tCreazione.setEnabled(true);
            tLista.setEnabled(true);
            break;
      }
   }

   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste gi? un'altra Raccolta con lo stesso codice";
         JOptionPane.showMessageDialog(this, msg, "Errore", 
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }

   protected void premutoOK() {
      if (getPadre() != null) {
         getPadre().setProprietaPadre("Raccolta", getTCodice().getText());
         dispose();
      }
   }
   
   public void setProprietaPadre(String proprieta, String valore) {
        if (proprieta.equals("Utente")) {
            tUtenteCodice.setText(valore);
            tDescrizione.requestFocusInWindow();
        }
        if (proprieta.equals("Foto")) {
            tFotoCodice.setText(valore);
            tDescrizione.requestFocusInWindow();
        }
        if (proprieta.equals("Album")) {
            if (!tListaModel.contains(valore)){
                tListaModel.addElement(valore);
            }
            tDescrizione.requestFocusInWindow();
        }
    }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        tNome = new javax.swing.JTextField();
        spCaratteristica = new javax.swing.JScrollPane();
        tabCaratteristica = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        tDescrizione = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tCreazione = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tFotoCodice = new javax.swing.JTextField();
        tFotoDescrizione = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        tUtenteCodice = new javax.swing.JTextField();
        tUtenteDescrizione = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tLista = new javax.swing.JList();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Raccolta");

        jLabel2.setText("Nome");

        tabCaratteristica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabCaratteristica.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        spCaratteristica.setViewportView(tabCaratteristica);

        jLabel4.setText("Descrizione");

        jLabel5.setText("Creazione");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/unina/logo.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        tFotoCodice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tFotoCodiceFocusLost(evt);
            }
        });
        tFotoCodice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tFotoCodiceKeyPressed(evt);
            }
        });

        jLabel11.setText("Copertina (F2 cerca)");

        tUtenteCodice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tUtenteCodiceFocusLost(evt);
            }
        });
        tUtenteCodice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tUtenteCodiceKeyPressed(evt);
            }
        });

        jLabel16.setText("Utente (F2 cerca)");

        tLista.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "azz", "dzx", "ftjh" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        tLista.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tListaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tLista);

        jLabel17.setText("Albums (F2 cerca)");

        jLabel18.setText("(F3 Elimina)");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(spCaratteristica)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(9, 9, 9)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(tNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(jLabel4)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(tDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel11)
                                    .add(jLabel16))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(tUtenteCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(tUtenteDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 288, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(tFotoCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(tFotoDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 288, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel17)
                                    .add(jLabel5)
                                    .add(jLabel18))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jScrollPane1)
                                    .add(tCreazione, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 258, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(30, 125, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(125, 125, 125)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel1)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tUtenteCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tUtenteDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel16))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tFotoCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tFotoDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel11))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(tNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(tDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel5)
                            .add(tCreazione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 106, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(jLabel17)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel18)))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(spCaratteristica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tFotoCodiceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tFotoCodiceFocusLost
        Object o;
        try {
            if (Integer.decode(tFotoCodice.getText()) > 0) {
                o = Database.leggiValore("select titolo from files where "
                    + "ID=?", Integer.decode(tFotoCodice.getText()));
                if (o != null) {
                    tFotoDescrizione.setText(o.toString());
                }
            }
        } catch (NumberFormatException e) {
            //mostraErrori(e,TMARCACODICEFOCUSLOST);
            //tMarcaCodice.grabFocus();
        }
//        tModelloCodice.setText("");
//        tModelloDescrizione.setText("");
    }//GEN-LAST:event_tFotoCodiceFocusLost

    private void tFotoCodiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFotoCodiceKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            Foto m;
            m = new Foto();
            m.setPadre(this);
            m.setVisible(true);
        }
    }//GEN-LAST:event_tFotoCodiceKeyPressed

    private void tUtenteCodiceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tUtenteCodiceFocusLost
        Object o;
        try {
            if (Integer.decode(tUtenteCodice.getText()) > 0) {
                o = Database.leggiValore("select username from utente where "
                    + "ID=?", Integer.decode(tUtenteCodice.getText()));
                if (o != null) {
                    tUtenteDescrizione.setText(o.toString());
                }
            }
        } catch (NumberFormatException e) {
            //mostraErrori(e,TMARCACODICEFOCUSLOST);
            //tMarcaCodice.grabFocus();
        }
//        tModelloCodice.setText("");
//        tModelloDescrizione.setText("");
    }//GEN-LAST:event_tUtenteCodiceFocusLost

    private void tUtenteCodiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tUtenteCodiceKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            Utente m;
            m = new Utente();
            m.setPadre(this);
            m.setVisible(true);
        }
    }//GEN-LAST:event_tUtenteCodiceKeyPressed

    private void tListaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tListaKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            Album m;
            if (tLista.isSelectionEmpty()) m = new Album();
            else  m = new Album(Integer.decode(tListaModel.elementAt(tLista.getSelectedIndex()).toString()));
            m.setPadre(this);
            m.setVisible(true);
            m.Cerca();
        }
        else if (evt.getKeyCode() == KeyEvent.VK_F3 && !tLista.isSelectionEmpty()) {
            tListaModel.removeElementAt(tLista.getSelectedIndex());
        }
    }//GEN-LAST:event_tListaKeyPressed

   protected void mostraDati() {
      try {
         tUtenteCodice.setText(rs.getString("CREATOREID"));
         tFotoCodice.setText(rs.getString("COPERTINAID"));
         tNome.setText(rs.getString("NOME"));
         tDescrizione.setText(rs.getString("DESCRIZIONE"));
         tCreazione.setText(rs.getString("DATACREAZIONE"));
         tListaModel.clear();
         
         ArrayList<String> arr = Database.leggiValori("SELECT ALBUMID FROM RACCOLTEALBUM WHERE RACCOLTAID = " + getTCodice().getText());
         for(String item : arr) tListaModel.addElement(item);

         super.mostraDati();
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   protected void pulisci() {
        super.pulisci();
        tUtenteCodice.setText("");
        tFotoCodice.setText("");
        tNome.setText("");
        tDescrizione.setText("");
        tCreazione.setText(Timestamp.from(Instant.now()).toString());
        tListaModel.clear();
   }

   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st = null;
      String ID = getTCodice().getText(),
        CREATOREID = tUtenteCodice.getText(),
        COPERTINAID = tFotoCodice.getText(),
        NOME = tNome.getText(),
        DESCRIZIONE = tDescrizione.getText(),
        DATACREAZIONE = tCreazione.getText();
      Pattern pat;
      Matcher matc;
      int k = 1;
      super.creaSelectStatement();
      //query = "select ID,COPERTINAID,CREATOREID,NOME,DESCRIZIONE,DATACREAZIONE from " + Database.schema + ".raccolta ";
              //+ "RIGHT OUTER JOIN " + Database.schema + ".raccoltealbum " +  "ON ID = RACCOLTAID ";
      query += " where 1=1 ";
      if (ID.length() > 0) {
         query += "and ID= ? ";
      }
      if (COPERTINAID.length() > 0) {
         if (COPERTINAID.indexOf("%") >= 0) {
            query += "and COPERTINAID like ? ";
         } else {
            query += "and COPERTINAID = ? ";
         }
      }
      if (NOME.length() > 0) {
         if (NOME.indexOf("%") >= 0) {
            query += "and NOME like ? ";
         } else {
            query += "and NOME = ? ";
         }
      }
      if (DESCRIZIONE.length() > 0) {
         if (DESCRIZIONE.indexOf("%") >= 0) {
            query += "and DESCRIZIONE like ? ";
         } else {
            query += "and DESCRIZIONE = ? ";
         }
      }
      if (CREATOREID.length() > 0) {
         if (CREATOREID.indexOf("%") >= 0) {
            query += "and CREATOREID like ? ";
         } else {
            query += "and CREATOREID = ? ";
         }
      }
      
      if(!tListaModel.isEmpty()){
          //query += "and ( ";
          query += "and " + tListaModel.getSize() + "  = ( SELECT COUNT(*) FROM " + Database.schema + ".raccoltealbum WHERE ID = RACCOLTAID and ( ";
          for(Object item : tListaModel.toArray()) query += "ALBUMID = " + item + " OR ";
          //query += "1=2 )";
          query += "1=2 ) )";
      }
      //query += "GROUP BY ID,COPERTINAID,CREATOREID,NOME,DESCRIZIONE,DATACREAZIONE";
      
      pat = Pattern.compile("where$|and$");
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, 
                 ResultSet.CONCUR_READ_ONLY);

         if (ID.length() > 0) {
            st.setInt(k++, Integer.decode(ID));
         }
         if (COPERTINAID.length() > 0) {
            st.setString(k++, COPERTINAID);
         }
         if (NOME.length() > 0) {
            st.setString(k++, NOME);
         }
         if (DESCRIZIONE.length() > 0) {
            st.setString(k++, DESCRIZIONE);
         }
         if (CREATOREID.length() > 0) {
            st.setString(k++, CREATOREID);
         }
      } catch (SQLException e) {
      }
      return st;
   }
   
   protected PreparedStatement getComandoInserimento(Connection c)
           throws SQLException {
      String queryIns;
      PreparedStatement st;
      int codice = Integer.decode(getTCodice().getText());
      queryIns = "insert all into " + Database.schema + ".raccolta (ID,"
              + "COPERTINAID,CREATOREID,NOME,DESCRIZIONE,DATACREAZIONE) values(?,?,?,?,?,?) ";
      for(Object o : tListaModel.toArray()){
          queryIns += "into " + Database.schema + ".raccoltealbum (RACCOLTAID,ALBUMID)"
                  + " values(" + codice + "," + o.toString() + ") ";
      }
      queryIns += " SELECT * FROM dual";
      st = c.prepareStatement(queryIns);
      st.setInt(1, codice);
      st.setString(2, tFotoCodice.getText());
      st.setString(3, tUtenteCodice.getText());
      st.setString(4, tNome.getText());
      st.setString(5, tDescrizione.getText());
      if (tCreazione.getText().length() > 0) st.setTimestamp(6, Timestamp.valueOf(tCreazione.getText()));
      else st.setTimestamp(6,  Timestamp.from(Instant.now()));
      return st;
   }

   protected PreparedStatement getComandoAggiornamento(Connection c)
           throws SQLException {
      int codice = Integer.decode(getTCodice().getText());
      String queryUp;
      PreparedStatement st;
      queryUp = "update " + Database.schema + ".raccolta set COPERTINAID=?,CREATOREID=?,NOME=?,DESCRIZIONE=?,DATACREAZIONE=? where ID=?";
      st = c.prepareStatement(queryUp);
      st.setInt(6, codice);
      st.setString(1, tFotoCodice.getText());
      st.setString(2, tUtenteCodice.getText());
      st.setString(3, tNome.getText());
      st.setString(4, tDescrizione.getText());
      if (tCreazione.getText().length() > 0) st.setTimestamp(5, Timestamp.valueOf(tCreazione.getText()));
      else st.setTimestamp(5,  Timestamp.from(Instant.now()));
      
      ArrayList<String> old = Database.leggiValori("SELECT ALBUMID FROM " + Database.schema + ".RACCOLTEALBUM WHERE RACCOLTAID = " + codice);
      for(String item : old){
          if(!tListaModel.contains(item)) eseguiComando("delete from " + Database.schema + ".raccoltealbum where ALBUMID = " + item);
      }
      for(Object item : tListaModel.toArray()){
          if(!old.contains(item)) eseguiComando("insert into " + Database.schema + ".raccoltealbum (RACCOLTAID,ALBUMID) values(" + codice + "," + item + ")");
      }
      
      return st;
   }
 
   /**
    * @param args the command line arguments
    */
   public static void main1(String args[]) {
      java.awt.EventQueue.invokeLater(new Runnable() {

         public void run() {
            new Raccolta().setVisible(true);
         }
      });
   }
   
    private DefaultListModel tListaModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane spCaratteristica;
    private javax.swing.JTextField tCreazione;
    private javax.swing.JTextField tDescrizione;
    private javax.swing.JTextField tFotoCodice;
    private javax.swing.JTextField tFotoDescrizione;
    private javax.swing.JList tLista;
    private javax.swing.JTextField tNome;
    private javax.swing.JTextField tUtenteCodice;
    private javax.swing.JTextField tUtenteDescrizione;
    private javax.swing.JTable tabCaratteristica;
    // End of variables declaration//GEN-END:variables
}
