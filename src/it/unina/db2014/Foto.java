/*
 * DBFrame.java
 *
 * Modified on 2013-06-03
 */
package it.unina.db2014;

import java.sql.*;
import javax.swing.*;
import java.util.regex.*;
import java.awt.event.KeyEvent;
import java.time.*;

/**
 *
 * @author Massimo
 * @author ADeLuca
 */
public class Foto extends DBFrame1 {

   /**
    * Creates new form DBFrame
    */
   public Foto() {
      super();
      initComponents();
      setModalita(APPEND_QUERY);
      setFrameTable(tabCaratteristica);
      setNomeTabella("files");
   }
   
   public Foto(int usr) {
      this();
      tUtenteCodice.setText(Integer.toString(usr));
   }

   public final void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
         case APPEND_QUERY:
            tUtenteCodice.setEnabled(true);
            tAlbumCodice.setEnabled(true);
            tGruppoCodice.setEnabled(true);
            tTitolo.setEnabled(true);
            tPrivacy.setEnabled(true);
            tDescrizione.setEnabled(true);
            tUpload.setEnabled(true);
            tData.setEnabled(true);
            tLuogo.setEnabled(true);
            tDimensione.setEnabled(true);
            tPercorso.setEnabled(true);
            tRisoluzione.setEnabled(true);
            tCompressione.setEnabled(true);
            tMarca.setEnabled(true);
            tModello.setEnabled(true);
            break;
         case BROWSE:
            tUtenteCodice.setEnabled(false);
            tAlbumCodice.setEnabled(false);
            tGruppoCodice.setEnabled(false);
            tTitolo.setEnabled(false);
            tPrivacy.setEnabled(false);
            tDescrizione.setEnabled(false);
            tUpload.setEnabled(false);
            tData.setEnabled(false);
            tLuogo.setEnabled(false);
            tDimensione.setEnabled(false);
            tPercorso.setEnabled(false);
            tRisoluzione.setEnabled(false);
            tCompressione.setEnabled(false);
            tMarca.setEnabled(false);
            tModello.setEnabled(false);
            break;
         case UPDATE:
            tUtenteCodice.setEnabled(true);
            tAlbumCodice.setEnabled(true);
            tGruppoCodice.setEnabled(true);
            tTitolo.setEnabled(true);
            tPrivacy.setEnabled(true);
            tDescrizione.setEnabled(true);
            tUpload.setEnabled(true);
            tData.setEnabled(true);
            tLuogo.setEnabled(true);
            tDimensione.setEnabled(true);
            tPercorso.setEnabled(true);
            tRisoluzione.setEnabled(true);
            tCompressione.setEnabled(true);
            tMarca.setEnabled(true);
            tModello.setEnabled(true);
            break;
      }
   }

   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste gi? un'altro File con lo stesso codice";
         JOptionPane.showMessageDialog(this, msg, "Errore", 
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }

   protected void premutoOK() {
      if (getPadre() != null) {
         if (this.bStar) getPadre().setProprietaPadre("PreferitiF", getTCodice().getText());
         if (this.bTag) getPadre().setProprietaPadre("TagF", getTCodice().getText());
         else getPadre().setProprietaPadre("Foto", getTCodice().getText());
         dispose();
      }
   }
   
   public void setProprietaPadre(String proprieta, String valore) {
        if (proprieta.equals("Utente")) {
            tUtenteCodice.setText(valore);
            tDescrizione.requestFocusInWindow();
        }
        if (proprieta.equals("Album")) {
            tAlbumCodice.setText(valore);
            tDescrizione.requestFocusInWindow();
        }
        if (proprieta.equals("Gruppo")) {
            tGruppoCodice.setText(valore);
            tDescrizione.requestFocusInWindow();
        } 
    }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        tTitolo = new javax.swing.JTextField();
        spCaratteristica = new javax.swing.JScrollPane();
        tabCaratteristica = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tDescrizione = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tUpload = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tData = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tLuogo = new javax.swing.JTextField();
        tDimensione = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tPercorso = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tGruppoCodice = new javax.swing.JTextField();
        tGruppoDescrizione = new javax.swing.JTextField();
        tAlbumCodice = new javax.swing.JTextField();
        tAlbumDescrizione = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        tRisoluzione = new javax.swing.JTextField();
        tMarca = new javax.swing.JTextField();
        tModello = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tPrivacy = new javax.swing.JComboBox();
        tCompressione = new javax.swing.JComboBox();
        tUtenteCodice = new javax.swing.JTextField();
        tUtenteDescrizione = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Foto");

        jLabel2.setText("Titolo");

        tabCaratteristica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabCaratteristica.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        spCaratteristica.setViewportView(tabCaratteristica);

        jLabel3.setText("Privacy");

        jLabel4.setText("Descrizione");

        jLabel5.setText("Upload");

        jLabel6.setText("Data");

        jLabel7.setText("Luogo");

        jLabel8.setText("Dimensione");

        jLabel9.setText("Percorso");

        jLabel10.setText("Gruppo (F2 cerca)");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/unina/logo.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        tGruppoCodice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tGruppoCodiceFocusLost(evt);
            }
        });
        tGruppoCodice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tGruppoCodiceKeyPressed(evt);
            }
        });

        tAlbumCodice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tAlbumCodiceFocusLost(evt);
            }
        });
        tAlbumCodice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tAlbumCodiceKeyPressed(evt);
            }
        });

        jLabel11.setText("Album (F2 cerca)");

        jLabel12.setText("Risoluzione");

        jLabel13.setText("Compressione");

        jLabel14.setText("Marca");

        jLabel15.setText("Modello");

        tPrivacy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tutti", "Me", "" }));
        tPrivacy.setSelectedItem("");
        tPrivacy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tPrivacyActionPerformed(evt);
            }
        });

        tCompressione.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JPEG", "GIF", "PNG", "RAW", "" }));
        tCompressione.setSelectedItem("");
        tCompressione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCompressioneActionPerformed(evt);
            }
        });

        tUtenteCodice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tUtenteCodiceFocusLost(evt);
            }
        });
        tUtenteCodice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tUtenteCodiceKeyPressed(evt);
            }
        });

        jLabel16.setText("Utente (F2 cerca)");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(spCaratteristica, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10)
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(tModello, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                            .add(6, 6, 6)
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                    .add(tGruppoCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                                    .add(tGruppoDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 283, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                    .add(jLabel2)
                                                    .add(26, 26, 26)
                                                    .add(tTitolo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                    .add(jLabel5)
                                                    .add(26, 26, 26)
                                                    .add(tUpload, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                    .add(jLabel6)
                                                    .add(26, 26, 26)
                                                    .add(tData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                        .add(jLabel7)
                                                        .add(jLabel8))
                                                    .add(26, 26, 26)
                                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, tDimensione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, tLuogo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                        .add(jLabel12)
                                                        .add(jLabel9)
                                                        .add(jLabel13)
                                                        .add(jLabel14)
                                                        .add(jLabel15))
                                                    .add(26, 26, 26)
                                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                                        .add(tPercorso)
                                                        .add(tRisoluzione)
                                                        .add(tMarca)
                                                        .add(tCompressione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4)
                                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3))
                                                    .add(26, 26, 26)
                                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                                        .add(tDescrizione)
                                                        .add(tPrivacy, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(jLabel11)
                                                .add(jLabel16))
                                            .add(13, 13, 13)
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(layout.createSequentialGroup()
                                                    .add(tUtenteCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                    .add(tUtenteDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 288, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                .add(layout.createSequentialGroup()
                                                    .add(tAlbumCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                    .add(tAlbumDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 288, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 258, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(125, 125, 125)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel1)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tUtenteCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tUtenteDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel16))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tAlbumCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tAlbumDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel11))
                        .add(8, 8, 8)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel10)
                            .add(tGruppoCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tGruppoDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(tTitolo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(tDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(tPrivacy, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel5)
                            .add(tUpload, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel6)
                            .add(tData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel7)
                            .add(tLuogo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel8)
                            .add(tDimensione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(tPercorso, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(7, 7, 7)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tRisoluzione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel12))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(tCompressione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tMarca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel14))
                .add(8, 8, 8)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tModello, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel15))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(spCaratteristica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tGruppoCodiceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tGruppoCodiceFocusLost
        Object o;
        try {
            if (Integer.decode(tGruppoCodice.getText()) > 0) {
                o = Database.leggiValore("select nome from gruppo where "
                    + "ID=?", Integer.decode(tGruppoCodice.getText()));
                if (o != null) {
                    tGruppoDescrizione.setText(o.toString());
                }
            }
        } catch (NumberFormatException e) {
            //mostraErrori(e,TMARCACODICEFOCUSLOST);
            //tMarcaCodice.grabFocus();
        }
//        tModelloCodice.setText("");
//        tModelloDescrizione.setText("");
    }//GEN-LAST:event_tGruppoCodiceFocusLost

    private void tGruppoCodiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tGruppoCodiceKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            Gruppo m;
            m = new Gruppo();
            m.setPadre(this);
            m.setVisible(true);
        }
    }//GEN-LAST:event_tGruppoCodiceKeyPressed

    private void tAlbumCodiceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tAlbumCodiceFocusLost
        Object o;
        try {
            if (Integer.decode(tAlbumCodice.getText()) > 0) {
                o = Database.leggiValore("select titolo from album where "
                    + "ID=?", Integer.decode(tAlbumCodice.getText()));
                if (o != null) {
                    tAlbumDescrizione.setText(o.toString());
                }
            }
        } catch (NumberFormatException e) {
            //mostraErrori(e,TMARCACODICEFOCUSLOST);
            //tMarcaCodice.grabFocus();
        }
//        tModelloCodice.setText("");
//        tModelloDescrizione.setText("");
    }//GEN-LAST:event_tAlbumCodiceFocusLost

    private void tAlbumCodiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tAlbumCodiceKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            Album m;
            m = new Album();
            m.setPadre(this);
            m.setVisible(true);
        }
    }//GEN-LAST:event_tAlbumCodiceKeyPressed

    private void tPrivacyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tPrivacyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tPrivacyActionPerformed

    private void tCompressioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCompressioneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tCompressioneActionPerformed

    private void tUtenteCodiceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tUtenteCodiceFocusLost
        Object o;
        try {
            if (Integer.decode(tUtenteCodice.getText()) > 0) {
                o = Database.leggiValore("select username from utente where "
                    + "ID=?", Integer.decode(tUtenteCodice.getText()));
                if (o != null) {
                    tUtenteDescrizione.setText(o.toString());
                }
            }
        } catch (NumberFormatException e) {
            //mostraErrori(e,TMARCACODICEFOCUSLOST);
            //tMarcaCodice.grabFocus();
        }
//        tModelloCodice.setText("");
//        tModelloDescrizione.setText("");
    }//GEN-LAST:event_tUtenteCodiceFocusLost

    private void tUtenteCodiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tUtenteCodiceKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            Utente m;
            m = new Utente();
            m.setPadre(this);
            m.setVisible(true);
        }
    }//GEN-LAST:event_tUtenteCodiceKeyPressed

   protected void mostraDati() {
      try {
         tUtenteCodice.setText(rs.getString("UTENTE"));
         tAlbumCodice.setText(rs.getString("ALBUMID"));
         tGruppoCodice.setText(rs.getString("GRUPPOID"));
         tTitolo.setText(rs.getString("TITOLO"));
         tPrivacy.setSelectedItem(rs.getString("PRIVACY"));
         tDescrizione.setText(rs.getString("DESCRIZIONE"));
         tUpload.setText(rs.getString("DATAUPLOAD"));
         tData.setText(rs.getString("DATA"));
         tLuogo.setText(rs.getString("LUOGO"));
         tDimensione.setText(rs.getString("DIMENSIONE"));
         tPercorso.setText(rs.getString("PERCORSO"));
         tRisoluzione.setText(rs.getString("RISOLUZIONE"));
         tCompressione.setSelectedItem(rs.getString("COMPRESSION"));
         tMarca.setText(rs.getString("CAMERAMAN"));
         tModello.setText(rs.getString("CAMERAMODEL"));
         super.mostraDati();
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   protected void pulisci() {
        super.pulisci();
        tUtenteCodice.setText("");
        tAlbumCodice.setText("");
        tGruppoCodice.setText("");
        tTitolo.setText("");
        //tPrivacy.setText("");
        tPrivacy.setSelectedItem("");
        tDescrizione.setText("");
        tUpload.setText(Timestamp.from(Instant.now()).toString());
        tData.setText(Timestamp.from(Instant.now()).toString());
        tLuogo.setText("");
        tDimensione.setText("");
        tPercorso.setText("");
        tRisoluzione.setText("");
        tCompressione.setSelectedItem("");
        tMarca.setText("");
        tModello.setText("");
   }

   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st = null;
      String ID = getTCodice().getText(),
        PROPRIETARIOID = tUtenteCodice.getText(),
        ALBUMID = tAlbumCodice.getText(),
        GRUPPOID = tGruppoCodice.getText(),
        TITOLO = tTitolo.getText(),
        DESCRIZIONE = tDescrizione.getText(),
        PRIVACY = tPrivacy.getSelectedItem().toString(),
        DATAUPLOAD = tUpload.getText(),
        DATA = tData.getText(),
        LUOGO = tLuogo.getText(),
        DIMENSIONE = tDimensione.getText(),
        PERCORSO = tPercorso.getText(),
        RISOLUZIONE = tRisoluzione.getText(),
        COMPRESSION = tCompressione.getSelectedItem().toString(),
        CAMERAMAN = tMarca.getText(),
        CAMERAMODEL = tModello.getText();
      Pattern pat;
      Matcher matc;
      int k = 1;
      //super.creaSelectStatement();
      query = "SELECT F.ID, A.PROPRIETARIOID as UTENTE, F.ALBUMID, F.GRUPPOID, F.TITOLO, F.DESCRIZIONE, F.PRIVACY, F.DATAUPLOAD, F.DATA, F.LUOGO, F.DIMENSIONE, F.PERCORSO, "
              + "FF.RISOLUZIONE, FF.COMPRESSION, FF.CAMERAMAN, FF.CAMERAMODEL FROM "
              + Database.schema + ".ALBUM A";
      query += " RIGHT OUTER JOIN " + Database.schema + ".FILES F " +  "ON A.ID = F.ALBUMID";
      query += " RIGHT OUTER JOIN " + Database.schema + ".FOTO FF " +  "ON F.ID = FF.FILEID";
      query += " where 1=1 ";
      if (ID.length() > 0) {
         query += "and F.ID= ? ";
      }
      if (ALBUMID.length() > 0) {
         if (ALBUMID.indexOf("%") >= 0) {
            query += "and F.ALBUMID like ? ";
         } else {
            query += "and F.ALBUMID = ? ";
         }
      }
      if (GRUPPOID.length() > 0) {
         if (GRUPPOID.indexOf("%") >= 0) {
            query += "and F.GRUPPOID like ? ";
         } else {
            query += "and F.GRUPPOID = ? ";
         }
      }
      if (TITOLO.length() > 0) {
         if (TITOLO.indexOf("%") >= 0) {
            query += "and F.TITOLO like ? ";
         } else {
            query += "and F.TITOLO = ? ";
         }
      }
      if (DESCRIZIONE.length() > 0) {
         if (DESCRIZIONE.indexOf("%") >= 0) {
            query += "and F.DESCRIZIONE like ? ";
         } else {
            query += "and F.DESCRIZIONE = ? ";
         }
      }
      if (PRIVACY.length() > 0) {
         if (PRIVACY.indexOf("%") >= 0) {
            query += "and F.PRIVACY like ? ";
         } else {
            query += "and F.PRIVACY = ? ";
         }
      }
      if (LUOGO.length() > 0) {
         if (LUOGO.indexOf("%") >= 0) {
            query += "and F.LUOGO like ? ";
         } else {
            query += "and F.LUOGO = ? ";
         }
      }
      if (DIMENSIONE.length() > 0) {
         if (DIMENSIONE.indexOf("%") >= 0) {
            query += "and F.DIMENSIONE like ? ";
         } else {
            query += "and F.DIMENSIONE = ? ";
         }
      }
      if (PERCORSO.length() > 0) {
         if (PERCORSO.indexOf("%") >= 0) {
            query += "and F.PERCORSO like ? ";
         } else {
            query += "and F.PERCORSO = ? ";
         }
      }
      if (RISOLUZIONE.length() > 0) {
         if (RISOLUZIONE.indexOf("%") >= 0) {
            query += "and FF.RISOLUZIONE like ? ";
         } else {
            query += "and FF.RISOLUZIONE = ? ";
         }
      }
      if (COMPRESSION.length() > 0) {
         if (COMPRESSION.indexOf("%") >= 0) {
            query += "and FF.COMPRESSION like ? ";
         } else {
            query += "and FF.COMPRESSION = ? ";
         }
      }
      if (CAMERAMAN.length() > 0) {
         if (CAMERAMAN.indexOf("%") >= 0) {
            query += "and FF.CAMERAMAN like ? ";
         } else {
            query += "and FF.CAMERAMAN = ? ";
         }
      }
      if (CAMERAMODEL.length() > 0) {
         if (CAMERAMODEL.indexOf("%") >= 0) {
            query += "and FF.CAMERAMODEL like ? ";
         } else {
            query += "and FF.CAMERAMODEL = ? ";
         }
      }
      if (PROPRIETARIOID.length() > 0) {
         if (PROPRIETARIOID.indexOf("%") >= 0) {
            query += "and A.PROPRIETARIOID like ? ";
         } else {
            query += "and A.PROPRIETARIOID = ? ";
         }
      }
      
      pat = Pattern.compile("where$|and$");
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      //System.out.println(query);
      //System.out.println("azz: " + COMPRESSION + " num: " + COMPRESSION.length());
      //query+=" order by codice";
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, 
                 ResultSet.CONCUR_READ_ONLY);

         if (ID.length() > 0) {
            st.setInt(k++, Integer.decode(ID));
         }
         if (ALBUMID.length() > 0) {
            st.setString(k++, ALBUMID);
         }
         if (GRUPPOID.length() > 0) {
            st.setString(k++, GRUPPOID);
         }
         if (TITOLO.length() > 0) {
            st.setString(k++, TITOLO);
         }
         if (DESCRIZIONE.length() > 0) {
            st.setString(k++, DESCRIZIONE);
         }
         if (PRIVACY.length() > 0) {
            st.setString(k++, PRIVACY);
         }
         if (LUOGO.length() > 0) {
            st.setString(k++, LUOGO);
         }
         if (DIMENSIONE.length() > 0) {
            st.setString(k++, DIMENSIONE);
         }
         if (PERCORSO.length() > 0) {
            st.setString(k++, PERCORSO);
         }
         if (RISOLUZIONE.length() > 0) {
            st.setString(k++, RISOLUZIONE);
         }
         if (COMPRESSION.length() > 0) {
            st.setString(k++, COMPRESSION);
         }
         if (CAMERAMAN.length() > 0) {
            st.setString(k++, CAMERAMAN);
         }
         if (CAMERAMODEL.length() > 0) {
            st.setString(k++, CAMERAMODEL);
         }
         if (PROPRIETARIOID.length() > 0) {
            st.setString(k++, PROPRIETARIOID);
         }
      } catch (SQLException e) {
      }
      return st;
   }
   
//   protected void impostaCodice() {
//      String codice;
//      System.out.println("select max(ID)+1 from " + Database.schema + "."
//              + this.nomeTabella);
//      codice = Database.leggiValore("select nvl(max(ID)+1,1) from "
//              + Database.schema + "." + this.nomeTabella).toString();
//      tCodice.setText(codice);
//   }

   protected PreparedStatement getComandoInserimento(Connection c)
           throws SQLException {
      String queryIns;
      PreparedStatement st;
      queryIns = "insert all into " + Database.schema + ".files (ID,"
              + "ALBUMID,GRUPPOID,TITOLO,DESCRIZIONE,PRIVACY,DATAUPLOAD,DATA,LUOGO,DIMENSIONE,PERCORSO) values(?,?,?,?,?,?,?,?,?,?,?)"
              +" into " + Database.schema + ".foto (FILEID,"
              + "RISOLUZIONE,COMPRESSION,CAMERAMAN,CAMERAMODEL) values(?,?,?,?,?) SELECT * FROM dual";
      st = c.prepareStatement(queryIns);
      st.setInt(1, Integer.decode(getTCodice().getText()));
      st.setString(2, tAlbumCodice.getText());
      st.setString(3, tGruppoCodice.getText());
      st.setString(4, tTitolo.getText());
      st.setString(5, tDescrizione.getText());
      st.setString(6, tPrivacy.getSelectedItem().toString());
      if (tUpload.getText().length() > 0) st.setTimestamp(7, Timestamp.valueOf(tUpload.getText()));
      else st.setTimestamp(7,  Timestamp.from(Instant.now()));
      if (tData.getText().length() > 0) st.setTimestamp(8, Timestamp.valueOf(tData.getText()));
      else st.setTimestamp(8, null);
      st.setString(9, tLuogo.getText());
      st.setInt(10, Integer.decode(tDimensione.getText()));
      st.setString(11, tPercorso.getText());
      st.setInt(12, Integer.decode(getTCodice().getText()));
      st.setString(13, tRisoluzione.getText());
      st.setString(14, tCompressione.getSelectedItem().toString());
      st.setString(15, tMarca.getText());
      st.setString(16, tModello.getText());
      return st;
   }

   protected PreparedStatement getComandoAggiornamento(Connection c)
           throws SQLException {
      String queryUp;
      PreparedStatement st;
      queryUp = "update " + Database.schema + ".files set ALBUMID=?,GRUPPOID=?,TITOLO=?,DESCRIZIONE=?,PRIVACY=?,DATAUPLOAD=?,DATA=?,LUOGO=?,DIMENSIONE=?,PERCORSO=? where ID=?";
      st = c.prepareStatement(queryUp);
      st.setInt(11, Integer.decode(getTCodice().getText()));
      st.setString(1, tAlbumCodice.getText());
      st.setString(2, tGruppoCodice.getText());
      st.setString(3, tTitolo.getText());
      st.setString(4, tDescrizione.getText());
      st.setString(5, tPrivacy.getSelectedItem().toString());
      if (tUpload.getText().length() > 0) st.setTimestamp(6, Timestamp.valueOf(tUpload.getText()));
      else st.setTimestamp(6,  Timestamp.from(Instant.now()));
      if (tData.getText().length() > 0) st.setTimestamp(7, Timestamp.valueOf(tData.getText()));
      else st.setTimestamp(7, null);
      st.setString(8, tLuogo.getText());
      st.setString(9, tDimensione.getText());
      st.setString(10, tPercorso.getText());
      st.executeUpdate();
      
      queryUp = "update " + Database.schema + ".foto set RISOLUZIONE=?,COMPRESSION=?,CAMERAMAN=?,CAMERAMODEL=? where FILEID=?";
      st = c.prepareStatement(queryUp);
      st.setInt(5, Integer.decode(getTCodice().getText()));
      st.setString(1, tRisoluzione.getText());
      st.setString(2, tCompressione.getSelectedItem().toString());
      st.setString(3, tMarca.getText());
      st.setString(4, tModello.getText());
      return st;
   }
 
   /**
    * @param args the command line arguments
    */
   public static void main1(String args[]) {
      java.awt.EventQueue.invokeLater(new Runnable() {

         public void run() {
            new Foto().setVisible(true);
         }
      });
   }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane spCaratteristica;
    private javax.swing.JTextField tAlbumCodice;
    private javax.swing.JTextField tAlbumDescrizione;
    private javax.swing.JComboBox tCompressione;
    private javax.swing.JTextField tData;
    private javax.swing.JTextField tDescrizione;
    private javax.swing.JTextField tDimensione;
    private javax.swing.JTextField tGruppoCodice;
    private javax.swing.JTextField tGruppoDescrizione;
    private javax.swing.JTextField tLuogo;
    private javax.swing.JTextField tMarca;
    private javax.swing.JTextField tModello;
    private javax.swing.JTextField tPercorso;
    private javax.swing.JComboBox tPrivacy;
    private javax.swing.JTextField tRisoluzione;
    private javax.swing.JTextField tTitolo;
    private javax.swing.JTextField tUpload;
    private javax.swing.JTextField tUtenteCodice;
    private javax.swing.JTextField tUtenteDescrizione;
    private javax.swing.JTable tabCaratteristica;
    // End of variables declaration//GEN-END:variables
}
