/*
 * DBFrame.java
 *
 * Modified on 2013-06-03
 */
package it.unina.db2014;

import java.sql.*;
import javax.swing.*;
import java.util.regex.*;
import java.awt.event.KeyEvent;
import java.time.*;
import java.util.ArrayList;

/**
 *
 * @author Massimo
 * @author ADeLuca
 */
public class Utente extends DBFrame1 {

   /**
    * Creates new form DBFrame
    */
   public Utente() {
      super();
      initComponents();
      tFollowerModel = new DefaultListModel();
      tFollowingModel = new DefaultListModel();
      tStarFoto = new DefaultListModel();
      tStarVideo = new DefaultListModel();
      tTagFoto = new DefaultListModel();
      tTagVideo = new DefaultListModel();
      tFollower.setModel(tFollowerModel);
      tFollowing.setModel(tFollowingModel);
      tStar.setModel(tStarFoto);
      tTag.setModel(tTagFoto);
      setModalita(APPEND_QUERY);
      setFrameTable(tabCaratteristica);
      setNomeTabella("utente");
   }
   
   public Utente(int usr) {
      this();
      impostaCodice(Integer.toString(usr));
      //tUtenteCodice.setText(Integer.toString(usr));
   }

   public final void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
         case APPEND_QUERY:
            tFotoCodice.setEnabled(true);
            tFotoDescrizione.setEnabled(true);
            tUsername.setEnabled(true);
            tEmail.setEnabled(true);
            tPassword.setEnabled(true);
            tNome.setEnabled(true);
            tCognome.setEnabled(true);
            tNascita.setEnabled(true);
            tRegistrazione.setEnabled(true);
            tLogin.setEnabled(true);
            tFollower.setEnabled(true);
            tFollowing.setEnabled(true);
            tFollowerData.setEnabled(true);
            tFollowingData.setEnabled(true);
            tStar.setEnabled(true);
            tStarData.setEnabled(true);
            tStarSel.setEnabled(true);
            tTag.setEnabled(true);
            tTagSel.setEnabled(true);
            break;
         case BROWSE:
            tFotoCodice.setEnabled(false);
            tFotoDescrizione.setEnabled(false);
            tUsername.setEnabled(false);
            tEmail.setEnabled(false);
            tPassword.setEnabled(false);
            tNome.setEnabled(false);
            tCognome.setEnabled(false);
            tNascita.setEnabled(false);
            tRegistrazione.setEnabled(false);
            tLogin.setEnabled(false);
            tFollower.setEnabled(false);
            tFollowing.setEnabled(false);
            tFollowerData.setEnabled(false);
            tFollowingData.setEnabled(false);
            tStar.setEnabled(false);
            tStarData.setEnabled(false);
            tStarSel.setEnabled(true);
            tTag.setEnabled(false);
            tTagSel.setEnabled(true);
            break;
         case UPDATE:
            tFotoCodice.setEnabled(true);
            tFotoDescrizione.setEnabled(true);
            tUsername.setEnabled(true);
            tEmail.setEnabled(true);
            tPassword.setEnabled(true);
            tNome.setEnabled(true);
            tCognome.setEnabled(true);
            tNascita.setEnabled(true);
            tRegistrazione.setEnabled(true);
            tLogin.setEnabled(true);
            tFollower.setEnabled(true);
            tFollowing.setEnabled(true);
            tFollowerData.setEnabled(true);
            tFollowingData.setEnabled(true);
            tStar.setEnabled(true);
            tStarData.setEnabled(true);
            tStarSel.setEnabled(true);
            tTag.setEnabled(true);
            tTagSel.setEnabled(true);
            break;
      }
   }

   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste gi? un'altro Utente con lo stesso codice";
         JOptionPane.showMessageDialog(this, msg, "Errore", 
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }

   protected void premutoOK() {
      if (getPadre() != null) {
         if (bFollower) getPadre().setProprietaPadre("Follower", getTCodice().getText());
         else if (bFollowing) getPadre().setProprietaPadre("Following", getTCodice().getText());
         else if (bMembro) getPadre().setProprietaPadre("Membro", getTCodice().getText());
         else if (bTag) getPadre().setProprietaPadre("Taggato", getTCodice().getText());
         else getPadre().setProprietaPadre("Utente", getTCodice().getText());
         dispose();
      }
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        tUsername = new javax.swing.JTextField();
        spCaratteristica = new javax.swing.JScrollPane();
        tabCaratteristica = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        tEmail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tPassword = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tNome = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tCognome = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tNascita = new javax.swing.JTextField();
        tRegistrazione = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tLogin = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tFotoCodice = new javax.swing.JTextField();
        tFotoDescrizione = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tFollowing = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        tFollower = new javax.swing.JList();
        jLabel18 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        tFollowerData = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        tFollowingData = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tStar = new javax.swing.JList();
        tStarData = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        tStarSel = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        tTag = new javax.swing.JList();
        jLabel24 = new javax.swing.JLabel();
        tTagSel = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Utente");

        jLabel2.setText("Username");

        tabCaratteristica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spCaratteristica.setViewportView(tabCaratteristica);

        jLabel3.setText("Email");

        jLabel4.setText("Password");

        jLabel5.setText("Nome");

        jLabel6.setText("Cognome");

        jLabel7.setText("Nascita");

        jLabel8.setText("Registrazione");

        jLabel9.setText("Ultimo Login");

        jLabel10.setText("Foto (F2 cerca)");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/unina/logo.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        tFotoCodice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tFotoCodiceFocusLost(evt);
            }
        });
        tFotoCodice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tFotoCodiceKeyPressed(evt);
            }
        });

        tFollowing.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "azz", "dzx", "ftjh" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        tFollowing.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tFollowingFocusLost(evt);
            }
        });
        tFollowing.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tFollowingKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tFollowing);

        tFollower.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "azz", "dzx", "ftjh" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        tFollower.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tFollowerFocusLost(evt);
            }
        });
        tFollower.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tFollowerKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tFollower);

        jLabel18.setText("(F3 Elimina)");

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("Followers");

        jLabel20.setText("Following");

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText(" (F2 cerca)");

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("Data");

        tStar.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "azz", "dzx", "ftjh" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        tStar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tStarFocusLost(evt);
            }
        });
        tStar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tStarKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(tStar);

        jLabel23.setText("Preferiti");

        tStarSel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Foto", "Video" }));
        tStarSel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tStarSelItemStateChanged(evt);
            }
        });

        tTag.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "azz", "dzx", "ftjh" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        tTag.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tTagKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(tTag);

        jLabel24.setText("Tag");

        tTagSel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Foto", "Video" }));
        tTagSel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tTagSelItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel10)
                                .add(26, 26, 26)
                                .add(tFotoCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(tFotoDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 283, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(15, 15, 15)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel3)
                                        .add(26, 26, 26)
                                        .add(tEmail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel2)
                                        .add(26, 26, 26)
                                        .add(tUsername, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel5)
                                        .add(26, 26, 26)
                                        .add(tNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel6)
                                        .add(26, 26, 26)
                                        .add(tCognome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel4)
                                        .add(26, 26, 26)
                                        .add(tPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                            .add(jLabel7)
                                            .add(jLabel8)
                                            .add(jLabel9)
                                            .add(jLabel21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(jLabel18)
                                            .add(jLabel22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(26, 26, 26)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                            .add(tRegistrazione, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                                            .add(tNascita, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                                            .add(tLogin))))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 258, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(spCaratteristica, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(100, 100, 100)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(tFollowerData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(18, 18, 18)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jLabel20)
                                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                                    .add(tFollowingData))
                                .add(18, 18, 18)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                        .add(jLabel23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(tStarSel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(16, 16, 16))
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(tStarData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel24, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(28, 28, 28)
                                        .add(tTagSel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(125, 125, 125)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel10)
                            .add(tFotoCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tFotoDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(tUsername, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(tPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(tEmail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel5)
                            .add(tNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel6)
                            .add(tCognome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel7)
                            .add(tNascita, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel8)
                            .add(tRegistrazione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel9)
                            .add(tLogin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel17)
                            .add(jLabel20)
                            .add(jLabel23)
                            .add(tStarSel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .add(jLabel21)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel18))
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tFollowerData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel22)
                            .add(tFollowingData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tStarData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel24)
                            .add(tTagSel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(spCaratteristica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 172, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tFotoCodiceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tFotoCodiceFocusLost
        Object o;
        try {
            if (Integer.decode(tFotoCodice.getText()) > 0) {
                o = Database.leggiValore("select descrizione from files where "
                    + "ID=?", Integer.decode(tFotoCodice.getText()));
                if (o != null) {
                    tFotoDescrizione.setText(o.toString());
                }
            }
        } catch (NumberFormatException e) {
            //mostraErrori(e,TMARCACODICEFOCUSLOST);
            //tMarcaCodice.grabFocus();
        }
//        tModelloCodice.setText("");
//        tModelloDescrizione.setText("");
    }//GEN-LAST:event_tFotoCodiceFocusLost

    private void tFotoCodiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFotoCodiceKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            Foto m;
            if (getTCodice().getText().length() > 0) m = new Foto(Integer.valueOf(getTCodice().getText()));
            else m = new Foto();
            m.setPadre(this);
            m.setVisible(true);
            m.Cerca();
        }
    }//GEN-LAST:event_tFotoCodiceKeyPressed

    private void tFollowingKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFollowingKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            Utente m;
            if (tFollowing.isSelectionEmpty()) m = new Utente();
            else  m = new Utente(Integer.decode(tFollowingModel.elementAt(tFollowing.getSelectedIndex()).toString()));
            m.setPadre(this);
            m.setVisible(true);
            m.bFollowing = true;
            m.Cerca();
        }
        else if (evt.getKeyCode() == KeyEvent.VK_F3 && !tFollowing.isSelectionEmpty()) {
            tFollowingModel.removeElementAt(tFollowing.getSelectedIndex());
        }
    }//GEN-LAST:event_tFollowingKeyPressed

    private void tFollowerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFollowerKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            Utente m;
            if (tFollower.isSelectionEmpty()) m = new Utente();
            else  m = new Utente(Integer.decode(tFollowerModel.elementAt(tFollower.getSelectedIndex()).toString()));
            m.setPadre(this);
            m.setVisible(true);
            m.bFollower = true;
            m.Cerca();
        }
        else if (evt.getKeyCode() == KeyEvent.VK_F3 && !tFollower.isSelectionEmpty()) {
            tFollowerModel.removeElementAt(tFollower.getSelectedIndex());
        }
    }//GEN-LAST:event_tFollowerKeyPressed

    private void tFollowerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tFollowerFocusLost
        Object o;
        try {
            if (!tFollower.isSelectionEmpty() && getTCodice().getText() != null) {
                o = Database.leggiValore("select DATACREAZIONE from FOLLOWING where"
                    + " FOLLOWERID = " + tFollowerModel.elementAt(tFollower.getSelectedIndex()).toString()
                    + " AND UTENTEID = " + getTCodice().getText());
                if (o != null) {
                    tFollowerData.setText(o.toString());
                }
            }
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_tFollowerFocusLost

    private void tFollowingFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tFollowingFocusLost
        Object o;
        try {
            if (!tFollowing.isSelectionEmpty() && getTCodice().getText() != null) {
                o = Database.leggiValore("select DATACREAZIONE from FOLLOWING where"
                    + " UTENTEID = " + tFollowingModel.elementAt(tFollowing.getSelectedIndex()).toString()
                    + " AND FOLLOWERID = " + getTCodice().getText());
                if (o != null) {
                    tFollowingData.setText(o.toString());
                }
            }
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_tFollowingFocusLost

    private void tStarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tStarFocusLost
        Object o;
        try {
            DefaultListModel Model;
            if (tStarSel.getSelectedItem().toString().equals("Foto")) Model = tStarFoto;
            else Model = tStarVideo;
            if (!tStar.isSelectionEmpty()) {
                o = Database.leggiValore("select DATACREAZIONE from PREFERITI where"
                    + " FILEID = " + Model.elementAt(tStar.getSelectedIndex()).toString()
                    + " AND UTENTEID = " + getTCodice().getText());
                if (o != null) {
                    tStarData.setText(o.toString());
                }
            }
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_tStarFocusLost

    private void tStarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tStarKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            DBFrame1 m;
            if (tStarSel.getSelectedItem().toString().equals("Foto")) m = new Foto();
            else m = new Video();
            m.setPadre(this);
            m.setVisible(true);
            m.bStar = true;
        }
        else if (evt.getKeyCode() == KeyEvent.VK_F3 && !tStar.isSelectionEmpty()) {
            DefaultListModel Model;
            if (tStarSel.getSelectedItem().toString().equals("Foto")) Model = tStarFoto;
            else Model = tStarVideo;
            Model.removeElementAt(tStar.getSelectedIndex());
        }
    }//GEN-LAST:event_tStarKeyPressed

    private void tStarSelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tStarSelItemStateChanged
        if (tStarSel.getSelectedItem().toString().equals("Foto")) tStar.setModel(tStarFoto);
        else tStar.setModel(tStarVideo);
    }//GEN-LAST:event_tStarSelItemStateChanged

    private void tTagKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tTagKeyPressed
        System.out.println("pressed");
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            DBFrame1 m;
            if (tTagSel.getSelectedItem().toString().equals("Foto")) m = new Foto();
            else m = new Video();
            m.setPadre(this);
            m.setVisible(true);
            m.bTag = true;
        }
        else if (evt.getKeyCode() == KeyEvent.VK_F3 && !tTag.isSelectionEmpty()) {
            DefaultListModel Model;
            if (tTagSel.getSelectedItem().toString().equals("Foto")) Model = tTagFoto;
            else Model = tTagVideo;
            Model.removeElementAt(tTag.getSelectedIndex());
        }
    }//GEN-LAST:event_tTagKeyPressed

    private void tTagSelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tTagSelItemStateChanged
        if (tTagSel.getSelectedItem().toString().equals("Foto")) tTag.setModel(tTagFoto);
        else tTag.setModel(tTagVideo);
    }//GEN-LAST:event_tTagSelItemStateChanged

    public void setProprietaPadre(String proprieta, String valore) {
        if (proprieta.equals("Foto")) {
            tFotoCodice.setText(valore);
            tUsername.requestFocusInWindow();
        }
        if (proprieta.equals("Follower")) {
            if (!tFollowerModel.contains(valore)){
                tFollowerModel.addElement(valore);
            }
            tUsername.requestFocusInWindow();
        }
        if (proprieta.equals("Following")) {
            if (!tFollowingModel.contains(valore)){
                tFollowingModel.addElement(valore);
            }
            tUsername.requestFocusInWindow();
        }
        if (proprieta.equals("PreferitiV")) {
            if (!tStarVideo.contains(valore)){
                tStarVideo.addElement(valore);
            }
            tUsername.requestFocusInWindow();
        }
        if (proprieta.equals("PreferitiF")) {
            if (!tStarFoto.contains(valore)){
                tStarFoto.addElement(valore);
            }
            tUsername.requestFocusInWindow();
        }
        if (proprieta.equals("TagV")) {
            if (!tTagVideo.contains(valore)){
                tTagVideo.addElement(valore);
            }
            tUsername.requestFocusInWindow();
        }
        if (proprieta.equals("TagF")) {
            if (!tTagFoto.contains(valore)){
                tTagFoto.addElement(valore);
            }
            tUsername.requestFocusInWindow();
        }
    }
   protected void mostraDati() {
      try {
         tFotoCodice.setText(rs.getString("FOTOID"));
         tUsername.setText(rs.getString("Username"));
         tEmail.setText(rs.getString("Email"));
         tPassword.setText(rs.getString("Password"));
         tNome.setText(rs.getString("Nome"));
         tCognome.setText(rs.getString("Cognome"));
         tNascita.setText(rs.getString("DATANASCITA"));
         tRegistrazione.setText(rs.getString("DATAREGISTRAZIONE"));
         tLogin.setText(rs.getString("ULTIMOLOGIN"));
         
         tFollowerModel.clear();
         ArrayList<String> arr = Database.leggiValori("SELECT FOLLOWERID FROM FOLLOWING WHERE UTENTEID = " + getTCodice().getText());
         for(String item : arr) tFollowerModel.addElement(item);
         
         tFollowingModel.clear();
         arr = Database.leggiValori("SELECT UTENTEID FROM FOLLOWING WHERE FOLLOWERID = " + getTCodice().getText());
         for(String item : arr) tFollowingModel.addElement(item);
         
         tStarVideo.clear();
         arr = Database.leggiValori("SELECT P.FILEID FROM PREFERITI P INNER JOIN VIDEO F ON P.FILEID = F.FILEID WHERE P.UTENTEID = " + getTCodice().getText());
         for(String item : arr) tStarVideo.addElement(item);
         
         tStarFoto.clear();
         arr = Database.leggiValori("SELECT P.FILEID FROM PREFERITI P INNER JOIN FOTO F ON P.FILEID = F.FILEID WHERE P.UTENTEID = " + getTCodice().getText());
         for(String item : arr) tStarFoto.addElement(item);
         
         tTagVideo.clear();
         arr = Database.leggiValori("SELECT P.FILEID FROM TAGSPEPOLE P INNER JOIN VIDEO F ON P.FILEID = F.FILEID WHERE P.UTENTEID = " + getTCodice().getText());
         for(String item : arr) tTagVideo.addElement(item);
         
         tTagFoto.clear();
         arr = Database.leggiValori("SELECT P.FILEID FROM TAGSPEPOLE P INNER JOIN FOTO F ON P.FILEID = F.FILEID WHERE P.UTENTEID = " + getTCodice().getText());
         for(String item : arr) tTagFoto.addElement(item);
         
         super.mostraDati();
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   protected void pulisci() {
      super.pulisci();
      tFotoCodice.setText("");
      tFotoDescrizione.setText("");
      tUsername.setText("");
      tEmail.setText("");
      tPassword.setText("");
      tNome.setText("");
      tCognome.setText("");
      tNascita.setText(Timestamp.from(Instant.now()).toString());
      tRegistrazione.setText(Timestamp.from(Instant.now()).toString());
      tLogin.setText(Timestamp.from(Instant.now()).toString());
      tFollowingModel.clear();
      tFollowerModel.clear();
      tStarFoto.clear();
      tStarVideo.clear();
      tFollowerData.setText("");
      tFollowingData.setText("");
      tStarData.setText("");
      tTagFoto.clear();
      tTagVideo.clear();
   }

   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st = null;
      String codice, usr, email, fot, pass, nom, cogn, datan, datar, dataul;
      Pattern pat;
      Matcher matc;
      int k = 1;
      super.creaSelectStatement();
      codice = getTCodice().getText();
      fot =  tFotoCodice.getText();
      usr = tUsername.getText();
      email = tEmail.getText();
      pass = tPassword.getText();
      nom = tNome.getText();
      cogn = tCognome.getText();
      datan = tNascita.getText();
      datar = tRegistrazione.getText();
      dataul = tLogin.getText();
      /*
       * if (codice.length()>0 || descr.length()>0 || sede.length()>0)
        {
       */
      query += " where 1=1 ";
      //}
      if (codice.length() > 0) {
         query += "and ID= ? ";
      }
      if (usr.length() > 0) {
         if (usr.indexOf("%") >= 0) {
            query += "and username like ? ";
         } else {
            query += "and username = ? ";
         }
      }
      if (email.length() > 0) {
         if (email.indexOf("%") >= 0) {
            query += "and email like ? ";
         } else {
            query += "and email = ? ";
         }
      }
      if (pass.length() > 0) {
         if (pass.indexOf("%") >= 0) {
            query += "and Password like ? ";
         } else {
            query += "and Password = ? ";
         }
      }
      if (nom.length() > 0) {
         if (nom.indexOf("%") >= 0) {
            query += "and nome like ? ";
         } else {
            query += "and nome = ? ";
         }
      }
      if (cogn.length() > 0) {
         if (cogn.indexOf("%") >= 0) {
            query += "and cognome like ? ";
         } else {
            query += "and cognome = ? ";
         }
      }
//      if (datan.length() > 0) {
//         if (datan.indexOf("%") >= 0) {
//            query += "and DATANASCITA like ? ";
//         } else {
//            query += "and DATANASCITA = ? ";
//         }
//      }
//      if (datar.length() > 0) {
//         if (datar.indexOf("%") >= 0) {
//            query += "and DATAREGISTRAZIONE like ? ";
//         } else {
//            query += "and DATAREGISTRAZIONE = ? ";
//         }
//      }
//      if (dataul.length() > 0) {
//         if (dataul.indexOf("%") >= 0) {
//            query += "and ULTIMOLOGIN like ? ";
//         } else {
//            query += "and ULTIMOLOGIN = ? ";
//         }
//      }
      if (fot.length() > 0) {
         if (fot.indexOf("%") >= 0) {
            query += "and FOTOID like ? ";
         } else {
            query += "and FOTOID = ? ";
         }
      }
      
      if(!tFollowerModel.isEmpty()){
          //query += "and ( ";
          query += "and " + tFollowerModel.getSize() + "  = ( SELECT COUNT(*) FROM " + Database.schema + ".following WHERE ID = UTENTEID and ( ";
          for(Object item : tFollowerModel.toArray()) query += "FOLLOWERID = " + item + " OR ";
          //query += "1=2 )";
          query += "1=2 ) ) ";
      }      
      if(!tFollowingModel.isEmpty()){
          //query += "and ( ";
          query += "and " + tFollowingModel.getSize() + "  = ( SELECT COUNT(*) FROM " + Database.schema + ".following WHERE ID = FOLLOWERID and ( ";
          for(Object item : tFollowingModel.toArray()) query += "UTENTEID = " + item + " OR ";
          //query += "1=2 )";
          query += "1=2 ) ) ";
      }
      if(!tStarFoto.isEmpty()){
          //query += "and ( ";
          query += "and " + tStarFoto.getSize() + "  = ( SELECT COUNT(*) FROM " + Database.schema + ".preferiti WHERE ID = UTENTEID and ( ";
          for(Object item : tStarFoto.toArray()) query += "FILEID = " + item + " OR ";
          //query += "1=2 )";
          query += "1=2 ) ) ";
      }
      if(!tStarVideo.isEmpty()){
          //query += "and ( ";
          query += "and " + tStarVideo.getSize() + "  = ( SELECT COUNT(*) FROM " + Database.schema + ".preferiti WHERE ID = UTENTEID and ( ";
          for(Object item : tStarVideo.toArray()) query += "FILEID = " + item + " OR ";
          //query += "1=2 )";
          query += "1=2 ) ) ";
      }
      if(!tTagFoto.isEmpty()){
          //query += "and ( ";
          query += "and " + tTagFoto.getSize() + "  = ( SELECT COUNT(*) FROM " + Database.schema + ".TAGSPEPOLE WHERE ID = UTENTEID and ( ";
          for(Object item : tTagFoto.toArray()) query += "FILEID = " + item + " OR ";
          //query += "1=2 )";
          query += "1=2 ) ) ";
      }
      if(!tTagVideo.isEmpty()){
          //query += "and ( ";
          query += "and " + tTagVideo.getSize() + "  = ( SELECT COUNT(*) FROM " + Database.schema + ".TAGSPEPOLE WHERE ID = UTENTEID and ( ";
          for(Object item : tTagVideo.toArray()) query += "FILEID = " + item + " OR ";
          //query += "1=2 )";
          query += "1=2 ) ) ";
      }
      
      pat = Pattern.compile("where$|and$");
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      System.out.println(query);
      //query+=" order by codice";
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, 
                 ResultSet.CONCUR_READ_ONLY);

         if (codice.length() > 0) {
            st.setInt(k++, Integer.decode(codice));
         }
         if (usr.length() > 0) {
            st.setString(k++, usr);
         }
         if (email.length() > 0) {
            st.setString(k++, email);
         }
         if (pass.length() > 0) {
            st.setString(k++, pass);
         }
         if (nom.length() > 0) {
            st.setString(k++, nom);
         }
         if (cogn.length() > 0) {
            st.setString(k++, cogn);
         }
//         if (datan.length() > 0) {
//            st.setString(k++, datan);
//         }
//         if (datar.length() > 0) {
//            st.setString(k++, datar);
//         }
//         if (dataul.length() > 0) {
//            st.setString(k++, dataul);
//         }
         if (fot.length() > 0) {
            st.setString(k++, fot);
         }
      } catch (SQLException e) {
      }
      return st;
   }

   protected PreparedStatement getComandoInserimento(Connection c)
           throws SQLException {
      String queryIns, app;
      PreparedStatement st;
      int codice = Integer.decode(getTCodice().getText());
      queryIns = "insert all into " + Database.schema + ".utente (ID,"
              + "FOTOID,Username,Password,Email,Nome,Cognome,Datanascita,Dataregistrazione,ULTIMOLOGIN) values(?,?,?,?,?,?,?,?,?,?)";
      
      if (tFollowerData.getText().length() > 0) app = tFollowerData.getText();
      else app = Timestamp.from(Instant.now()).toString();  
      for(Object o : tFollowerModel.toArray()){
          queryIns += "into " + Database.schema + ".FOLLOWING (UTENTEID,FOLLOWERID,DATACREAZIONE)"
                  + " values(" + codice + "," + o.toString() + ",TIMESTAMP '" + app + "') ";
      }
      if (tFollowingData.getText().length() > 0) app = tFollowingData.getText();
      else app = Timestamp.from(Instant.now()).toString();  
      for(Object o : tFollowingModel.toArray()){
          queryIns += "into " + Database.schema + ".FOLLOWING (FOLLOWERID,UTENTEID,DATACREAZIONE)"
                  + " values(" + codice + "," + o.toString() + ",TIMESTAMP '" + app + "') ";
      }
      if (tStarData.getText().length() > 0) app = tStarData.getText();
      else app = Timestamp.from(Instant.now()).toString();  
      for(Object o : tStarFoto.toArray()){
          queryIns += "into " + Database.schema + ".PREFERITI (UTENTEID,FILEID,DATACREAZIONE)"
                  + " values(" + codice + "," + o.toString() + ",TIMESTAMP '" + app + "') ";
      }
      for(Object o : tStarVideo.toArray()){
          queryIns += "into " + Database.schema + ".PREFERITI (UTENTEID,FILEID,DATACREAZIONE)"
                  + " values(" + codice + "," + o.toString() + ",TIMESTAMP '" + app + "') ";
      }
      for(Object o : tTagFoto.toArray()){
          queryIns += "into " + Database.schema + ".TAGSPEPOLE (UTENTEID,FILEID)"
                  + " values(" + codice + "," + o.toString() + ") ";
      }
      for(Object o : tTagVideo.toArray()){
          queryIns += "into " + Database.schema + ".TAGSPEPOLE (UTENTEID,FILEID)"
                  + " values(" + codice + "," + o.toString() + ") ";
      }
      queryIns += " SELECT * FROM dual";
      
      st = c.prepareStatement(queryIns);
      st.setInt(1, codice);
      st.setString(2,tFotoCodice.getText());
      st.setString(3, tUsername.getText());
      st.setString(4, tPassword.getText());
      st.setString(5, tEmail.getText());
      st.setString(6, tNome.getText());
      st.setString(7, tCognome.getText());
      if (tNascita.getText().length() > 0) st.setTimestamp(8, Timestamp.valueOf(tNascita.getText()));
      else st.setTimestamp(8,  null);
      if (tRegistrazione.getText().length() > 0) st.setTimestamp(9, Timestamp.valueOf(tRegistrazione.getText()));
      else st.setTimestamp(9,  Timestamp.from(Instant.now()));
      if (tLogin.getText().length() > 0) st.setTimestamp(10, Timestamp.valueOf(tLogin.getText()));
      else st.setTimestamp(10,  Timestamp.from(Instant.now()));
      return st;
   }

   protected PreparedStatement getComandoAggiornamento(Connection c)
           throws SQLException {
      int codice = Integer.decode(getTCodice().getText());
      String queryUp;
      PreparedStatement st;
      queryUp = "update " + Database.schema + ".utente set FOTOID=?, Username=?, Password=?, Email=?, Nome=?, Cognome=?, Datanascita=?, Dataregistrazione=?, ULTIMOLOGIN=? where ID=?";
      //queryUp = "update " + Database.schema + ".utente set FOTOID=?, Username=?, Password=?, Email=?, Nome=?, Cognome=? where ID=?";
      st = c.prepareStatement(queryUp);
      st.setInt(10, codice);
      //st.setInt(7, Integer.decode(getTCodice().getText()));
      st.setString(1, tFotoCodice.getText());
      st.setString(2, tUsername.getText());
      st.setString(3, tPassword.getText());
      st.setString(4, tEmail.getText());
      st.setString(5, tNome.getText());
      st.setString(6, tCognome.getText());
      if (tNascita.getText().length() > 0) st.setTimestamp(7, Timestamp.valueOf(tNascita.getText()));
      else st.setTimestamp(7, null);
      if (tRegistrazione.getText().length() > 0)  st.setTimestamp(8, Timestamp.valueOf(tRegistrazione.getText()));
      else st.setTimestamp(8,  Timestamp.from(Instant.now()));
      if (tLogin.getText().length() > 0) st.setTimestamp(9, Timestamp.valueOf(tLogin.getText()));
      else st.setTimestamp(9,  Timestamp.from(Instant.now()));
      
      ArrayList<String> old = Database.leggiValori("SELECT FOLLOWERID FROM " + Database.schema + ".FOLLOWING WHERE UTENTEID = " + codice);
      for(String item : old){
          if(!tFollowerModel.contains(item)) eseguiComando("delete from " + Database.schema + ".FOLLOWING where FOLLOWERID = " + item + " and UTENTEID = " + codice);
      }
      for(Object item : tFollowerModel.toArray()){
          if(!old.contains(item)) eseguiComando("insert into " + Database.schema + ".FOLLOWING (UTENTEID,FOLLOWERID,DATACREAZIONE) values(" + codice + "," + item
                  + ",TIMESTAMP '" + Timestamp.from(Instant.now()).toString() + "') ");
      }
      old = Database.leggiValori("SELECT UTENTEID FROM " + Database.schema + ".FOLLOWING WHERE FOLLOWERID = " + codice);
      for(String item : old){
          if(!tFollowingModel.contains(item)) eseguiComando("delete from " + Database.schema + ".FOLLOWING where UTENTEID = " + item + " and FOLLOWERID = " + codice);
      }
      for(Object item : tFollowingModel.toArray()){
          if(!old.contains(item)) eseguiComando("insert into " + Database.schema + ".FOLLOWING (FOLLOWERID,UTENTEID,DATACREAZIONE) values(" + codice + "," + item
                  + ",TIMESTAMP '" + Timestamp.from(Instant.now()).toString() + "') ");
      }
      old = Database.leggiValori("SELECT FILEID FROM " + Database.schema + ".PREFERITI WHERE UTENTEID = " + codice);
      for(String item : old){
          if(!tStarFoto.contains(item) && !tStarVideo.contains(item)) eseguiComando("delete from " + Database.schema + ".PREFERITI where FILEID = " + item + " and UTENTEID = " + codice);
      }
      for(Object item : tStarFoto.toArray()){
          if(!old.contains(item)) eseguiComando("insert into " + Database.schema + ".PREFERITI (UTENTEID,FILEID,DATACREAZIONE) values(" + codice + "," + item
                  + ",TIMESTAMP '" + Timestamp.from(Instant.now()).toString() + "') ");
      }
      for(Object item : tStarVideo.toArray()){
          if(!old.contains(item)) eseguiComando("insert into " + Database.schema + ".PREFERITI (UTENTEID,FILEID,DATACREAZIONE) values(" + codice + "," + item
                  + ",TIMESTAMP '" + Timestamp.from(Instant.now()).toString() + "') ");
      }
      old = Database.leggiValori("SELECT FILEID FROM " + Database.schema + ".TAGSPEPOLE WHERE UTENTEID = " + codice);
      for(String item : old){
          if(!tTagFoto.contains(item) && !tTagVideo.contains(item)) eseguiComando("delete from " + Database.schema + ".TAGSPEPOLE where FILEID = " + item + " and UTENTEID = " + codice);
      }
      for(Object item : tTagFoto.toArray()){
          if(!old.contains(item)) eseguiComando("insert into " + Database.schema + ".TAGSPEPOLE (UTENTEID,FILEID) values(" + codice + "," + item + ") ");
      }
      for(Object item : tTagVideo.toArray()){
          if(!old.contains(item)) eseguiComando("insert into " + Database.schema + ".TAGSPEPOLE (UTENTEID,FILEID) values(" + codice + "," + ") ");
      }
      
      return st;
   }

   /**
    * @param args the command line arguments
    */
   public static void main1(String args[]) {
      java.awt.EventQueue.invokeLater(new Runnable() {

         public void run() {
            new Utente().setVisible(true);
         }
      });
   }
   
   private DefaultListModel tTagFoto;
   private DefaultListModel tTagVideo;
   private DefaultListModel tStarFoto;
   private DefaultListModel tStarVideo;
   private DefaultListModel tFollowerModel;
   private DefaultListModel tFollowingModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane spCaratteristica;
    private javax.swing.JTextField tCognome;
    private javax.swing.JTextField tEmail;
    private javax.swing.JList tFollower;
    private javax.swing.JTextField tFollowerData;
    private javax.swing.JList tFollowing;
    private javax.swing.JTextField tFollowingData;
    private javax.swing.JTextField tFotoCodice;
    private javax.swing.JTextField tFotoDescrizione;
    private javax.swing.JTextField tLogin;
    private javax.swing.JTextField tNascita;
    private javax.swing.JTextField tNome;
    private javax.swing.JTextField tPassword;
    private javax.swing.JTextField tRegistrazione;
    private javax.swing.JList tStar;
    private javax.swing.JTextField tStarData;
    private javax.swing.JComboBox tStarSel;
    private javax.swing.JList tTag;
    private javax.swing.JComboBox tTagSel;
    private javax.swing.JTextField tUsername;
    private javax.swing.JTable tabCaratteristica;
    // End of variables declaration//GEN-END:variables
}
