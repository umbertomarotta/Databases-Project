/*
 * DBFrame.java
 *
 * Modified on 2013-06-03
 */
package it.unina.db2014;

import java.sql.*;
import javax.swing.*;
import java.util.regex.*;

/**
 *
 * @author Massimo
 * @author ADeLuca
 * @version %I%, 2013
 */
public class Modello extends DBFrame {

   /**
    * Creates new form DBFrame
    */
   public Modello() {
      super();
      initComponents();
      setModalita(APPEND_QUERY);
      setFrameTable(tabModello);
      setNomeTabella("vmodello");
      tMarcaDescrizione.setEnabled(false);
   }
   final static public int TMARCACODICEFOCUSLOST = 1;

   public final void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
         case APPEND_QUERY:
            tMarcaCodice.setEnabled(true);
            tDescrizione.setEnabled(true);
            tDaPeriodo.setEnabled(true);
            tAPeriodo.setEnabled(true);
            break;
         case BROWSE:
            tMarcaCodice.setEnabled(false);
            tDescrizione.setEnabled(false);
            tDaPeriodo.setEnabled(false);
            tAPeriodo.setEnabled(false);
            break;
         case UPDATE:
            tMarcaCodice.setEnabled(true);
            tDescrizione.setEnabled(true);
            tDaPeriodo.setEnabled(true);
            tAPeriodo.setEnabled(true);
            break;
      }
   }

   public void setProprietaPadre(String proprieta, String valore) {
      if (proprieta.equals("Marca")) {
         tMarcaCodice.setText(valore);
         tDescrizione.requestFocusInWindow();
      }
   }

   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste gi? un altro modello con lo stesso codice";
         JOptionPane.showMessageDialog(this, msg, "Errore",
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }

   protected void mostraErrori(Exception e, int contesto) {
      String msg;
      if (contesto == TMARCACODICEFOCUSLOST) {
         msg = "Il codice deve essere intero \n";
         JOptionPane.showMessageDialog(this, msg, "Errore",
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, contesto);
      }
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel2 = new javax.swing.JLabel();
      tDescrizione = new javax.swing.JTextField();
      spMarca = new javax.swing.JScrollPane();
      tabModello = new javax.swing.JTable();
      tDaPeriodo = new javax.swing.JTextField();
      jLabel3 = new javax.swing.JLabel();
      tAPeriodo = new javax.swing.JTextField();
      jLabel4 = new javax.swing.JLabel();
      jLabel5 = new javax.swing.JLabel();
      tMarcaCodice = new javax.swing.JTextField();
      tMarcaDescrizione = new javax.swing.JTextField();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Modello");

      jLabel2.setText("Descrizione");

      tabModello.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
         },
         new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
         }
      ));
      spMarca.setViewportView(tabModello);

      jLabel3.setText("Da periodo");

      jLabel4.setText("A periodo");

      jLabel5.setText("Marca (F2 cerca)");

      tMarcaCodice.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusLost(java.awt.event.FocusEvent evt) {
            tMarcaCodiceFocusLost(evt);
         }
      });
      tMarcaCodice.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            tMarcaCodiceKeyPressed(evt);
         }
      });

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .add(19, 19, 19)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(spMarca, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)
               .add(layout.createSequentialGroup()
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jLabel2)
                     .add(jLabel3)
                     .add(jLabel5))
                  .add(26, 26, 26)
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                     .add(layout.createSequentialGroup()
                        .add(tMarcaCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(23, 23, 23)
                        .add(tMarcaDescrizione))
                     .add(layout.createSequentialGroup()
                        .add(tDaPeriodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(41, 41, 41)
                        .add(jLabel4)
                        .add(22, 22, 22)
                        .add(tAPeriodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                     .add(tDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
            .add(18, 18, 18))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .addContainerGap(119, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(tMarcaCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(jLabel5)
               .add(tMarcaDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel2)
               .add(tDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                  .add(jLabel3)
                  .add(tDaPeriodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
               .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                  .add(jLabel4)
                  .add(tAPeriodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .add(18, 18, 18)
            .add(spMarca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 267, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      getAccessibleContext().setAccessibleDescription("");

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void tMarcaCodiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tMarcaCodiceKeyPressed
       if (evt.getKeyCode() == evt.VK_F2) {
          Marca m;
          m = new Marca();
          m.setPadre(this);
          m.setVisible(true);
       }
    }//GEN-LAST:event_tMarcaCodiceKeyPressed

    private void tMarcaCodiceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tMarcaCodiceFocusLost
       Object o;
       try {
          if (Integer.decode(tMarcaCodice.getText()) > 0) {
             o = Database.leggiValore("select descrizione from marca where "
                     + "codice=?", Integer.decode(tMarcaCodice.getText()));
             if (o != null) {
                tMarcaDescrizione.setText(o.toString());
             }
          }
       } catch (NumberFormatException e) {
          System.out.println(e.getMessage());
       }
    }//GEN-LAST:event_tMarcaCodiceFocusLost

   protected void mostraDati() {
      try {
         tMarcaCodice.setText(rs.getString("MarcaCodice"));
         tMarcaDescrizione.setText(rs.getString("Marca"));
         tDescrizione.setText(rs.getString("Descrizione"));
         tDaPeriodo.setText(rs.getString("DaPeriodo"));
         tAPeriodo.setText(rs.getString("APeriodo"));
         super.mostraDati();
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   protected void premutoOK() {
      if (getPadre() != null) {
         getPadre().setProprietaPadre("Modello", getTCodice().getText());
         dispose();
      }
   }

   protected void pulisci() {
      super.pulisci();
      tDescrizione.setText("");
      tMarcaCodice.setText("");
      tMarcaDescrizione.setText("");
      tDaPeriodo.setText("");
      tAPeriodo.setText("");
   }

   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st = null;
      Pattern pat;
      Matcher matc;
      String codice, marcacodice, descr, da, a;
      int k = 1;
      super.creaSelectStatement();
      codice = getTCodice().getText();
      marcacodice = tMarcaCodice.getText();
      descr = tDescrizione.getText();
      da = tDaPeriodo.getText();
      a = tAPeriodo.getText();
      /*
       * if (codice.length()>0 || descr.length()>0 || sede.length()>0)
        {
       */
      query += " where";
      //}
      if (codice.length() > 0) {
         query += " codice= ? and";
      }
      if (marcacodice.length() > 0) {
         if (marcacodice.indexOf("%") >= 0) {
            query += " marcacodice like ? and";
         } else {
            query += " marcacodice = ? and";
         }
      }
      if (descr.length() > 0) {
         if (descr.indexOf("%") >= 0) {
            query += " descrizione like ? and";
         } else {
            query += " descrizione = ? and";
         }
      }
      if (da.length() > 0) {
         if (da.indexOf("%") >= 0) {
            query += " daperiodo like ? and";
         } else {
            query += " daperiodo = ? and";
         }
      }
      if (a.length() > 0) {
         if (a.indexOf("%") >= 0) {
            query += " aperiodo like ?";
         } else {
            query += " aperiodo = ?";
         }
      }
      pat = Pattern.compile("where$|and$");
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      System.out.println(query);
      //query+=" order by codice";
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                 ResultSet.CONCUR_READ_ONLY);

         if (codice.length() > 0) {
            st.setInt(k++, Integer.decode(codice));
         }
         if (marcacodice.length() > 0) {
            st.setString(k++, marcacodice);
         }
         if (descr.length() > 0) {
            st.setString(k++, descr);
         }
         if (da.length() > 0) {
            st.setString(k++, da);
         }
         if (da.length() > 0) {
            st.setString(k++, da);
         }
      } catch (SQLException e) {
      }
      return st;
   }

   protected PreparedStatement getComandoInserimento(Connection c)
           throws SQLException {
      String queryIns;
      PreparedStatement st;
      queryIns = "insert into " + Database.schema + ".modello (codice,marcacodice,"
              + "Descrizione,daperiodo,aperiodo)  values(?,?,?,?,?)";
      st = c.prepareStatement(queryIns);
      st.setInt(1, Integer.decode(getTCodice().getText()));
      st.setInt(2, Integer.decode(tMarcaCodice.getText()));
      st.setString(3, tDescrizione.getText());
      st.setString(4, tDaPeriodo.getText());
      st.setString(5, tAPeriodo.getText());
      return st;
   }

   protected PreparedStatement getComandoAggiornamento(Connection c)
           throws SQLException {
      String queryUp;
      PreparedStatement st;
      queryUp = "update " + Database.schema + ".modello set descrizione=?,"
              + "Marcacodice=?,daPeriodo=?,aPeriodo=? where codice=?";
      st = c.prepareStatement(queryUp);
      st.setInt(5, Integer.decode(getTCodice().getText()));
      st.setInt(2, Integer.decode(tMarcaCodice.getText()));
      st.setString(1, tDescrizione.getText());
      st.setString(3, tDaPeriodo.getText());
      st.setString(4, tAPeriodo.getText());
      return st;
   }

   protected String getComandoAggiornamento() {
      String queryUp;
      queryUp = "update " + Database.schema + ".modello set descrizione='"
              + tDescrizione.getText() + "',Marcacodice="
              + tMarcaCodice.getText() + ",daPeriodo='" + tDaPeriodo.getText()
              + "',aPeriodo='" + tAPeriodo.getText() + "' where codice="
              + getTCodice().getText();
      return queryUp;
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JScrollPane spMarca;
   private javax.swing.JTextField tAPeriodo;
   private javax.swing.JTextField tDaPeriodo;
   private javax.swing.JTextField tDescrizione;
   private javax.swing.JTextField tMarcaCodice;
   private javax.swing.JTextField tMarcaDescrizione;
   private javax.swing.JTable tabModello;
   // End of variables declaration//GEN-END:variables
}
