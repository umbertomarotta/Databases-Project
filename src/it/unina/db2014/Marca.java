/*
 * DBFrame.java
 *
 * Modified on 2013-06-03
 */
package it.unina.db2014;

import java.sql.*;
import javax.swing.*;
import java.util.regex.*;

/**
 * Finestra che mostra la tabella Marca.
 * 
 * @author Massimo
 * @author ADeLuca
 * @version 2013
 */
public class Marca extends DBFrame {

   /**
    * Creates new form DBFrame.
    */
   public Marca() {
      super();
      initComponents();
      setModalita(APPEND_QUERY);
      setFrameTable(tabMarca);
      setNomeTabella("marca");
   }

   final public void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
         case APPEND_QUERY:
            tDescrizione.setEnabled(true);
            tSede.setEnabled(true);
            break;
         case BROWSE:
            tDescrizione.setEnabled(false);
            tSede.setEnabled(false);
            break;
         case UPDATE:
            tDescrizione.setEnabled(true);
            tSede.setEnabled(true);
            break;
      }
   }

   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste gi? un'altra marca con lo stesso codice";
         JOptionPane.showMessageDialog(this, msg, "Errore",
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }

   protected void premutoOK() {
      if (getPadre() != null) {
         getPadre().setProprietaPadre("Marca", getTCodice().getText());
         try {
            rs.close();
         } catch (SQLException e) {
            mostraErrori(e);
         }
         dispose();
      }
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel2 = new javax.swing.JLabel();
      tDescrizione = new javax.swing.JTextField();
      spMarca = new javax.swing.JScrollPane();
      tabMarca = new javax.swing.JTable();
      tSede = new javax.swing.JTextField();
      jLabel3 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Marca");

      jLabel2.setText("Descrizione");

      tabMarca.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
         },
         new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
         }
      ));
      spMarca.setViewportView(tabMarca);

      jLabel3.setText("Sede");

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .add(19, 19, 19)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(spMarca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 774, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(layout.createSequentialGroup()
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jLabel2)
                     .add(jLabel3))
                  .add(26, 26, 26)
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(tSede, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(tDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap(31, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap(117, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel2)
               .add(tDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel3)
               .add(tSede, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(18, 18, 18)
            .add(spMarca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 245, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      getAccessibleContext().setAccessibleDescription("");

      pack();
   }// </editor-fold>//GEN-END:initComponents

   protected void mostraDati() {
      try {
         tDescrizione.setText(rs.getString("Descrizione"));
         tSede.setText(rs.getString("Sede"));
         super.mostraDati();
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   protected void pulisci() {
      super.pulisci();
      tDescrizione.setText("");
      tSede.setText("");
   }

   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st = null;
      String codice, descr, sede;
      Pattern pat;
      Matcher matc;
      int k = 1;
      super.creaSelectStatement();
      codice = getTCodice().getText();
      descr = tDescrizione.getText();
      sede = tSede.getText();
      /*
       * if (codice.length()>0 || descr.length()>0 || sede.length()>0)
        {
       */
      query += " where";
      //}
      if (codice.length() > 0) {
         query += " codice= ? and";
      }
      if (descr.length() > 0) {
         if (descr.indexOf("%") >= 0) {
            query += " descrizione like ? and";
         } else {
            query += " descrizione = ? and";
         }
      }
      if (sede.length() > 0) {
         if (sede.indexOf("%") >= 0) {
            query += " sede like ?";
         } else {
            query += " sede = ?";
         }
      }
      pat = Pattern.compile("where$|and$");
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      System.out.println(query);
      //query+=" order by codice";
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                 ResultSet.CONCUR_READ_ONLY);

         if (codice.length() > 0) {
            st.setInt(k++, Integer.decode(codice));
         }
         if (descr.length() > 0) {
            st.setString(k++, descr);
         }
         if (sede.length() > 0) {
            st.setString(k++, sede);
         }
         return st;
      } catch (SQLException e) {
         mostraErrori(e);
         return null;
      }
   }

   protected PreparedStatement getComandoInserimento(Connection c)
           throws SQLException {
      String query;
      PreparedStatement st;
      query = "insert into " + Database.schema + ".marca (codice,Descrizione,"
              + "Sede) values(?,?,?)";
      st = c.prepareStatement(query);
      st.setInt(1, Integer.decode(getTCodice().getText()));
      st.setString(2, tDescrizione.getText());
      st.setString(3, tSede.getText());
      return st;
   }

   protected PreparedStatement getComandoAggiornamento(Connection c)
           throws SQLException {
      String query;
      PreparedStatement st;
      query = "update " + Database.schema + ".marca set descrizione=?,sede=? "
              + "where codice=?";
      st = c.prepareStatement(query);
      st.setInt(3, Integer.decode(getTCodice().getText()));
      st.setString(1, tDescrizione.getText());
      st.setString(2, tSede.getText());
      return st;
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JScrollPane spMarca;
   private javax.swing.JTextField tDescrizione;
   private javax.swing.JTextField tSede;
   private javax.swing.JTable tabMarca;
   // End of variables declaration//GEN-END:variables
}
